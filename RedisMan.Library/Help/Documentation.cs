using System;
using System.Collections.Generic;
using System.Text;

namespace RedisMan.Library.Help
{
    class Documentation
    {
        static string[] Groups = {
            "generic",
            "string",
            "list",
            "set",
            "sorted_set",
            "hash",
            "pubsub",
            "transactions",
            "connection",
            "server",
            "scripting",
            "hyperloglog",
            "cluster",
            "geo",
            "stream"
        };

        public class CommandHelp
        {
            public string Name { get; set; }
            public string Params { get; set; }
            public string Summary { get; set; }
            public int Group { get; set; }
            public string Since { get; set; }
        }


        public static class Help
        {
            static Dictionary<string, CommandHelp> CommandsHelp = new Dictionary<string, CommandHelp>
            {
                {"APPEND", new CommandHelp { Name = "APPEND",  Params = "key value",  Summary = "Append a value to a key", Group = 1, Since = "2.0.0" }},
                {"AUTH", new CommandHelp { Name = "AUTH",  Params = "password",  Summary = "Authenticate to the server", Group = 8, Since = "1.0.0" }},
                {"BGREWRITEAOF", new CommandHelp { Name = "BGREWRITEAOF",  Params = "-",  Summary = "Asynchronously rewrite the append-only file", Group = 9, Since = "1.0.0" }},
                {"BGSAVE", new CommandHelp { Name = "BGSAVE",  Params = "-",  Summary = "Asynchronously save the dataset to disk", Group = 9, Since = "1.0.0" }},
                {"BITCOUNT", new CommandHelp { Name = "BITCOUNT",  Params = "key [start end]",  Summary = "Count set bits in a string", Group = 1, Since = "2.6.0" }},
                {"BITFIELD", new CommandHelp { Name = "BITFIELD",  Params = "key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]",  Summary = "Perform arbitrary bitfield integer operations on strings", Group = 1, Since = "3.2.0" }},
                {"BITOP", new CommandHelp { Name = "BITOP",  Params = "operation destkey key [key ...]",  Summary = "Perform bitwise operations between strings", Group = 1, Since = "2.6.0" }},
                {"BITPOS", new CommandHelp { Name = "BITPOS",  Params = "key bit [start] [end]",  Summary = "Find first bit set or clear in a string", Group = 1, Since = "2.8.7" }},
                {"BLPOP", new CommandHelp { Name = "BLPOP",  Params = "key [key ...] timeout",  Summary = "Remove and get the first element in a list, or block until one is available", Group = 2, Since = "2.0.0" }},
                {"BRPOP", new CommandHelp { Name = "BRPOP",  Params = "key [key ...] timeout",  Summary = "Remove and get the last element in a list, or block until one is available", Group = 2, Since = "2.0.0" }},
                {"BRPOPLPUSH", new CommandHelp { Name = "BRPOPLPUSH",  Params = "source destination timeout",  Summary = "Pop a value from a list, push it to another list and return it; or block until one is available", Group = 2, Since = "2.2.0" }},
                {"BZPOPMAX", new CommandHelp { Name = "BZPOPMAX",  Params = "key [key ...] timeout",  Summary = "Remove and return the member with the highest score from one or more sorted sets, or block until one is available", Group = 4, Since = "5.0.0" }},
                {"BZPOPMIN", new CommandHelp { Name = "BZPOPMIN",  Params = "key [key ...] timeout",  Summary = "Remove and return the member with the lowest score from one or more sorted sets, or block until one is available", Group = 4, Since = "5.0.0" }},
                {"CLIENT GETNAME", new CommandHelp { Name = "CLIENT GETNAME",  Params = "-",  Summary = "Get the current connection name", Group = 9, Since = "2.6.9" }},
                {"CLIENT ID", new CommandHelp { Name = "CLIENT ID",  Params = "-",  Summary = "Returns the client ID for the current connection", Group = 9, Since = "5.0.0" }},
                {"CLIENT KILL", new CommandHelp { Name = "CLIENT KILL",  Params = "[ip:port] [ID client-id] [TYPE normal|master|slave|pubsub] [ADDR ip:port] [SKIPME yes/no]",  Summary = "Kill the connection of a client", Group = 9, Since = "2.4.0" }},
                {"CLIENT LIST", new CommandHelp { Name = "CLIENT LIST",  Params = "-",  Summary = "Get the list of client connections", Group = 9, Since = "2.4.0" }},
                {"CLIENT PAUSE", new CommandHelp { Name = "CLIENT PAUSE",  Params = "timeout",  Summary = "Stop processing commands from clients for some time", Group = 9, Since = "2.9.50" }},
                {"CLIENT REPLY", new CommandHelp { Name = "CLIENT REPLY",  Params = "ON|OFF|SKIP",  Summary = "Instruct the server whether to reply to commands", Group = 9, Since = "3.2" }},
                {"CLIENT SETNAME", new CommandHelp { Name = "CLIENT SETNAME",  Params = "connection-name",  Summary = "Set the current connection name", Group = 9, Since = "2.6.9" }},
                {"CLIENT UNBLOCK", new CommandHelp { Name = "CLIENT UNBLOCK",  Params = "client-id [TIMEOUT|ERROR]",  Summary = "Unblock a client blocked in a blocking command from a different connection", Group = 9, Since = "5.0.0" }},
                {"CLUSTER ADDSLOTS", new CommandHelp { Name = "CLUSTER ADDSLOTS",  Params = "slot [slot ...]",  Summary = "Assign new hash slots to receiving node", Group = 12, Since = "3.0.0" }},
                {"CLUSTER COUNT-FAILURE-REPORTS", new CommandHelp { Name = "CLUSTER COUNT-FAILURE-REPORTS",  Params = "node-id",  Summary = "Return the number of failure reports active for a given node", Group = 12, Since = "3.0.0" }},
                {"CLUSTER COUNTKEYSINSLOT", new CommandHelp { Name = "CLUSTER COUNTKEYSINSLOT",  Params = "slot",  Summary = "Return the number of local keys in the specified hash slot", Group = 12, Since = "3.0.0" }},
                {"CLUSTER DELSLOTS", new CommandHelp { Name = "CLUSTER DELSLOTS",  Params = "slot [slot ...]",  Summary = "Set hash slots as unbound in receiving node", Group = 12, Since = "3.0.0" }},
                {"CLUSTER FAILOVER", new CommandHelp { Name = "CLUSTER FAILOVER",  Params = "[FORCE|TAKEOVER]",  Summary = "Forces a replica to perform a manual failover of its master.", Group = 12, Since = "3.0.0" }},
                {"CLUSTER FORGET", new CommandHelp { Name = "CLUSTER FORGET",  Params = "node-id",  Summary = "Remove a node from the nodes table", Group = 12, Since = "3.0.0" }},
                {"CLUSTER GETKEYSINSLOT", new CommandHelp { Name = "CLUSTER GETKEYSINSLOT",  Params = "slot count",  Summary = "Return local key names in the specified hash slot", Group = 12, Since = "3.0.0" }},
                {"CLUSTER INFO", new CommandHelp { Name = "CLUSTER INFO",  Params = "-",  Summary = "Provides info about Redis Cluster node state", Group = 12, Since = "3.0.0" }},
                {"CLUSTER KEYSLOT", new CommandHelp { Name = "CLUSTER KEYSLOT",  Params = "key",  Summary = "Returns the hash slot of the specified key", Group = 12, Since = "3.0.0" }},
                {"CLUSTER MEET", new CommandHelp { Name = "CLUSTER MEET",  Params = "ip port",  Summary = "Force a node cluster to handshake with another node", Group = 12, Since = "3.0.0" }},
                {"CLUSTER NODES", new CommandHelp { Name = "CLUSTER NODES",  Params = "-",  Summary = "Get Cluster config for the node", Group = 12, Since = "3.0.0" }},
                {"CLUSTER REPLICAS", new CommandHelp { Name = "CLUSTER REPLICAS",  Params = "node-id",  Summary = "List replica nodes of the specified master node", Group = 12, Since = "5.0.0" }},
                {"CLUSTER REPLICATE", new CommandHelp { Name = "CLUSTER REPLICATE",  Params = "node-id",  Summary = "Reconfigure a node as a replica of the specified master node", Group = 12, Since = "3.0.0" }},
                {"CLUSTER RESET", new CommandHelp { Name = "CLUSTER RESET",  Params = "[HARD|SOFT]",  Summary = "Reset a Redis Cluster node", Group = 12, Since = "3.0.0" }},
                {"CLUSTER SAVECONFIG", new CommandHelp { Name = "CLUSTER SAVECONFIG",  Params = "-",  Summary = "Forces the node to save cluster state on disk", Group = 12, Since = "3.0.0" }},
                {"CLUSTER SET-CONFIG-EPOCH", new CommandHelp { Name = "CLUSTER SET-CONFIG-EPOCH",  Params = "config-epoch",  Summary = "Set the configuration epoch in a new node", Group = 12, Since = "3.0.0" }},
                {"CLUSTER SETSLOT", new CommandHelp { Name = "CLUSTER SETSLOT",  Params = "slot IMPORTING|MIGRATING|STABLE|NODE [node-id]",  Summary = "Bind a hash slot to a specific node", Group = 12, Since = "3.0.0" }},
                {"CLUSTER SLAVES", new CommandHelp { Name = "CLUSTER SLAVES",  Params = "node-id",  Summary = "List replica nodes of the specified master node", Group = 12, Since = "3.0.0" }},
                {"CLUSTER SLOTS", new CommandHelp { Name = "CLUSTER SLOTS",  Params = "-",  Summary = "Get array of Cluster slot to node mappings", Group = 12, Since = "3.0.0" }},
                {"COMMAND", new CommandHelp { Name = "COMMAND",  Params = "-",  Summary = "Get array of Redis command details", Group = 9, Since = "2.8.13" }},
                {"COMMAND COUNT", new CommandHelp { Name = "COMMAND COUNT",  Params = "-",  Summary = "Get total number of Redis commands", Group = 9, Since = "2.8.13" }},
                {"COMMAND GETKEYS", new CommandHelp { Name = "COMMAND GETKEYS",  Params = "-",  Summary = "Extract keys given a full Redis command", Group = 9, Since = "2.8.13" }},
                {"COMMAND INFO", new CommandHelp { Name = "COMMAND INFO",  Params = "command-name [command-name ...]",  Summary = "Get array of specific Redis command details", Group = 9, Since = "2.8.13" }},
                {"CONFIG GET", new CommandHelp { Name = "CONFIG GET",  Params = "parameter",  Summary = "Get the value of a configuration parameter", Group = 9, Since = "2.0.0" }},
                {"CONFIG RESETSTAT", new CommandHelp { Name = "CONFIG RESETSTAT",  Params = "-",  Summary = "Reset the stats returned by INFO", Group = 9, Since = "2.0.0" }},
                {"CONFIG REWRITE", new CommandHelp { Name = "CONFIG REWRITE",  Params = "-",  Summary = "Rewrite the configuration file with the in memory configuration", Group = 9, Since = "2.8.0" }},
                {"CONFIG SET", new CommandHelp { Name = "CONFIG SET",  Params = "parameter value",  Summary = "Set a configuration parameter to the given value", Group = 9, Since = "2.0.0" }},
                {"DBSIZE", new CommandHelp { Name = "DBSIZE",  Params = "-",  Summary = "Return the number of keys in the selected database", Group = 9, Since = "1.0.0" }},
                {"DEBUG OBJECT", new CommandHelp { Name = "DEBUG OBJECT",  Params = "key",  Summary = "Get debugging information about a key", Group = 9, Since = "1.0.0" }},
                {"DEBUG SEGFAULT", new CommandHelp { Name = "DEBUG SEGFAULT",  Params = "-",  Summary = "Make the server crash", Group = 9, Since = "1.0.0" }},
                {"DECR", new CommandHelp { Name = "DECR",  Params = "key",  Summary = "Decrement the integer value of a key by one", Group = 1, Since = "1.0.0" }},
                {"DECRBY", new CommandHelp { Name = "DECRBY",  Params = "key decrement",  Summary = "Decrement the integer value of a key by the given number", Group = 1, Since = "1.0.0" }},
                {"DEL", new CommandHelp { Name = "DEL",  Params = "key [key ...]",  Summary = "Delete a key", Group = 0, Since = "1.0.0" }},
                {"DISCARD", new CommandHelp { Name = "DISCARD",  Params = "-",  Summary = "Discard all commands issued after MULTI", Group = 7, Since = "2.0.0" }},
                {"DUMP", new CommandHelp { Name = "DUMP",  Params = "key",  Summary = "Return a serialized version of the value stored at the specified key.", Group = 0, Since = "2.6.0" }},
                {"ECHO", new CommandHelp { Name = "ECHO",  Params = "message",  Summary = "Echo the given string", Group = 8, Since = "1.0.0" }},
                {"EVAL", new CommandHelp { Name = "EVAL",  Params = "script numkeys key [key ...] arg [arg ...]",  Summary = "Execute a Lua script server side", Group = 10, Since = "2.6.0" }},
                {"EVALSHA", new CommandHelp { Name = "EVALSHA",  Params = "sha1 numkeys key [key ...] arg [arg ...]",  Summary = "Execute a Lua script server side", Group = 10, Since = "2.6.0" }},
                {"EXEC", new CommandHelp { Name = "EXEC",  Params = "-",  Summary = "Execute all commands issued after MULTI", Group = 7, Since = "1.2.0" }},
                {"EXISTS", new CommandHelp { Name = "EXISTS",  Params = "key [key ...]",  Summary = "Determine if a key exists", Group = 0, Since = "1.0.0" }},
                {"EXPIRE", new CommandHelp { Name = "EXPIRE",  Params = "key seconds",  Summary = "Set a key's time to live in seconds", Group = 0, Since = "1.0.0" }},
                {"EXPIREAT", new CommandHelp { Name = "EXPIREAT",  Params = "key timestamp",  Summary = "Set the expiration for a key as a UNIX timestamp", Group = 0, Since = "1.2.0" }},
                {"FLUSHALL", new CommandHelp { Name = "FLUSHALL",  Params = "[ASYNC]",  Summary = "Remove all keys from all databases", Group = 9, Since = "1.0.0" }},
                {"FLUSHDB", new CommandHelp { Name = "FLUSHDB",  Params = "[ASYNC]",  Summary = "Remove all keys from the current database", Group = 9, Since = "1.0.0" }},
                {"GEOADD", new CommandHelp { Name = "GEOADD",  Params = "key longitude latitude member [longitude latitude member ...]",  Summary = "Add one or more geospatial items in the geospatial index represented using a sorted set", Group = 13, Since = "3.2.0" }},
                {"GEODIST", new CommandHelp { Name = "GEODIST",  Params = "key member1 member2 [unit]",  Summary = "Returns the distance between two members of a geospatial index", Group = 13, Since = "3.2.0" }},
                {"GEOHASH", new CommandHelp { Name = "GEOHASH",  Params = "key member [member ...]",  Summary = "Returns members of a geospatial index as standard geohash strings", Group = 13, Since = "3.2.0" }},
                {"GEOPOS", new CommandHelp { Name = "GEOPOS",  Params = "key member [member ...]",  Summary = "Returns longitude and latitude of members of a geospatial index", Group = 13, Since = "3.2.0" }},
                {"GEORADIUS", new CommandHelp { Name = "GEORADIUS",  Params = "key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]",  Summary = "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point", Group = 13, Since = "3.2.0" }},
                {"GEORADIUSBYMEMBER", new CommandHelp { Name = "GEORADIUSBYMEMBER",  Params = "key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]",  Summary = "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member", Group = 13, Since = "3.2.0" }},
                {"GET", new CommandHelp { Name = "GET",  Params = "key",  Summary = "Get the value of a key", Group = 1, Since = "1.0.0" }},
                {"GETBIT", new CommandHelp { Name = "GETBIT",  Params = "key offset",  Summary = "Returns the bit value at offset in the string value stored at key", Group = 1, Since = "2.2.0" }},
                {"GETRANGE", new CommandHelp { Name = "GETRANGE",  Params = "key start end",  Summary = "Get a substring of the string stored at a key", Group = 1, Since = "2.4.0" }},
                {"GETSET", new CommandHelp { Name = "GETSET",  Params = "key value",  Summary = "Set the string value of a key and return its old value", Group = 1, Since = "1.0.0" }},
                {"HDEL", new CommandHelp { Name = "HDEL",  Params = "key field [field ...]",  Summary = "Delete one or more hash fields", Group = 5, Since = "2.0.0" }},
                {"HEXISTS", new CommandHelp { Name = "HEXISTS",  Params = "key field",  Summary = "Determine if a hash field exists", Group = 5, Since = "2.0.0" }},
                {"HGET", new CommandHelp { Name = "HGET",  Params = "key field",  Summary = "Get the value of a hash field", Group = 5, Since = "2.0.0" }},
                {"HGETALL", new CommandHelp { Name = "HGETALL",  Params = "key",  Summary = "Get all the fields and values in a hash", Group = 5, Since = "2.0.0" }},
                {"HINCRBY", new CommandHelp { Name = "HINCRBY",  Params = "key field increment",  Summary = "Increment the integer value of a hash field by the given number", Group = 5, Since = "2.0.0" }},
                {"HINCRBYFLOAT", new CommandHelp { Name = "HINCRBYFLOAT",  Params = "key field increment",  Summary = "Increment the float value of a hash field by the given amount", Group = 5, Since = "2.6.0" }},
                {"HKEYS", new CommandHelp { Name = "HKEYS",  Params = "key",  Summary = "Get all the fields in a hash", Group = 5, Since = "2.0.0" }},
                {"HLEN", new CommandHelp { Name = "HLEN",  Params = "key",  Summary = "Get the number of fields in a hash", Group = 5, Since = "2.0.0" }},
                {"HMGET", new CommandHelp { Name = "HMGET",  Params = "key field [field ...]",  Summary = "Get the values of all the given hash fields", Group = 5, Since = "2.0.0" }},
                {"HMSET", new CommandHelp { Name = "HMSET",  Params = "key field value [field value ...]",  Summary = "Set multiple hash fields to multiple values", Group = 5, Since = "2.0.0" }},
                {"HSCAN", new CommandHelp { Name = "HSCAN",  Params = "key cursor [MATCH pattern] [COUNT count]",  Summary = "Incrementally iterate hash fields and associated values", Group = 5, Since = "2.8.0" }},
                {"HSET", new CommandHelp { Name = "HSET",  Params = "key field value",  Summary = "Set the string value of a hash field", Group = 5, Since = "2.0.0" }},
                {"HSETNX", new CommandHelp { Name = "HSETNX",  Params = "key field value",  Summary = "Set the value of a hash field, only if the field does not exist", Group = 5, Since = "2.0.0" }},
                {"HSTRLEN", new CommandHelp { Name = "HSTRLEN",  Params = "key field",  Summary = "Get the length of the value of a hash field", Group = 5, Since = "3.2.0" }},
                {"HVALS", new CommandHelp { Name = "HVALS",  Params = "key",  Summary = "Get all the values in a hash", Group = 5, Since = "2.0.0" }},
                {"INCR", new CommandHelp { Name = "INCR",  Params = "key",  Summary = "Increment the integer value of a key by one", Group = 1, Since = "1.0.0" }},
                {"INCRBY", new CommandHelp { Name = "INCRBY",  Params = "key increment",  Summary = "Increment the integer value of a key by the given amount", Group = 1, Since = "1.0.0" }},
                {"INCRBYFLOAT", new CommandHelp { Name = "INCRBYFLOAT",  Params = "key increment",  Summary = "Increment the float value of a key by the given amount", Group = 1, Since = "2.6.0" }},
                {"INFO", new CommandHelp { Name = "INFO",  Params = "[section]",  Summary = "Get information and statistics about the server", Group = 9, Since = "1.0.0" }},
                {"KEYS", new CommandHelp { Name = "KEYS",  Params = "pattern",  Summary = "Find all keys matching the given pattern", Group = 0, Since = "1.0.0" }},
                {"LASTSAVE", new CommandHelp { Name = "LASTSAVE",  Params = "-",  Summary = "Get the UNIX time stamp of the last successful save to disk", Group = 9, Since = "1.0.0" }},
                {"LINDEX", new CommandHelp { Name = "LINDEX",  Params = "key index",  Summary = "Get an element from a list by its index", Group = 2, Since = "1.0.0" }},
                {"LINSERT", new CommandHelp { Name = "LINSERT",  Params = "key BEFORE|AFTER pivot value",  Summary = "Insert an element before or after another element in a list", Group = 2, Since = "2.2.0" }},
                {"LLEN", new CommandHelp { Name = "LLEN",  Params = "key",  Summary = "Get the length of a list", Group = 2, Since = "1.0.0" }},
                {"LPOP", new CommandHelp { Name = "LPOP",  Params = "key",  Summary = "Remove and get the first element in a list", Group = 2, Since = "1.0.0" }},
                {"LPUSH", new CommandHelp { Name = "LPUSH",  Params = "key value [value ...]",  Summary = "Prepend one or multiple values to a list", Group = 2, Since = "1.0.0" }},
                {"LPUSHX", new CommandHelp { Name = "LPUSHX",  Params = "key value",  Summary = "Prepend a value to a list, only if the list exists", Group = 2, Since = "2.2.0" }},
                {"LRANGE", new CommandHelp { Name = "LRANGE",  Params = "key start stop",  Summary = "Get a range of elements from a list", Group = 2, Since = "1.0.0" }},
                {"LREM", new CommandHelp { Name = "LREM",  Params = "key count value",  Summary = "Remove elements from a list", Group = 2, Since = "1.0.0" }},
                {"LSET", new CommandHelp { Name = "LSET",  Params = "key index value",  Summary = "Set the value of an element in a list by its index", Group = 2, Since = "1.0.0" }},
                {"LTRIM", new CommandHelp { Name = "LTRIM",  Params = "key start stop",  Summary = "Trim a list to the specified range", Group = 2, Since = "1.0.0" }},
                {"MEMORY DOCTOR", new CommandHelp { Name = "MEMORY DOCTOR",  Params = "-",  Summary = "Outputs memory problems report", Group = 9, Since = "4.0.0" }},
                {"MEMORY HELP", new CommandHelp { Name = "MEMORY HELP",  Params = "-",  Summary = "Show helpful text about the different subcommands", Group = 9, Since = "4.0.0" }},
                {"MEMORY MALLOC-STATS", new CommandHelp { Name = "MEMORY MALLOC-STATS",  Params = "-",  Summary = "Show allocator internal stats", Group = 9, Since = "4.0.0" }},
                {"MEMORY PURGE", new CommandHelp { Name = "MEMORY PURGE",  Params = "-",  Summary = "Ask the allocator to release memory", Group = 9, Since = "4.0.0" }},
                {"MEMORY STATS", new CommandHelp { Name = "MEMORY STATS",  Params = "-",  Summary = "Show memory usage details", Group = 9, Since = "4.0.0" }},
                {"MEMORY USAGE", new CommandHelp { Name = "MEMORY USAGE",  Params = "key [SAMPLES count]",  Summary = "Estimate the memory usage of a key", Group = 9, Since = "4.0.0" }},
                {"MGET", new CommandHelp { Name = "MGET",  Params = "key [key ...]",  Summary = "Get the values of all the given keys", Group = 1, Since = "1.0.0" }},
                {"MIGRATE", new CommandHelp { Name = "MIGRATE",  Params = "host port key| destination-db timeout [COPY] [REPLACE] [KEYS key]",  Summary = "Atomically transfer a key from a Redis instance to another one.", Group = 0, Since = "2.6.0" }},
                {"MONITOR", new CommandHelp { Name = "MONITOR",  Params = "-",  Summary = "Listen for all requests received by the server in real time", Group = 9, Since = "1.0.0" }},
                {"MOVE", new CommandHelp { Name = "MOVE",  Params = "key db",  Summary = "Move a key to another database", Group = 0, Since = "1.0.0" }},
                {"MSET", new CommandHelp { Name = "MSET",  Params = "key value [key value ...]",  Summary = "Set multiple keys to multiple values", Group = 1, Since = "1.0.1" }},
                {"MSETNX", new CommandHelp { Name = "MSETNX",  Params = "key value [key value ...]",  Summary = "Set multiple keys to multiple values, only if none of the keys exist", Group = 1, Since = "1.0.1" }},
                {"MULTI", new CommandHelp { Name = "MULTI",  Params = "-",  Summary = "Mark the start of a transaction block", Group = 7, Since = "1.2.0" }},
                {"OBJECT", new CommandHelp { Name = "OBJECT",  Params = "subcommand [arguments [arguments ...]]",  Summary = "Inspect the internals of Redis objects", Group = 0, Since = "2.2.3" }},
                {"PERSIST", new CommandHelp { Name = "PERSIST",  Params = "key",  Summary = "Remove the expiration from a key", Group = 0, Since = "2.2.0" }},
                {"PEXPIRE", new CommandHelp { Name = "PEXPIRE",  Params = "key milliseconds",  Summary = "Set a key's time to live in milliseconds", Group = 0, Since = "2.6.0" }},
                {"PEXPIREAT", new CommandHelp { Name = "PEXPIREAT",  Params = "key milliseconds-timestamp",  Summary = "Set the expiration for a key as a UNIX timestamp specified in milliseconds", Group = 0, Since = "2.6.0" }},
                {"PFADD", new CommandHelp { Name = "PFADD",  Params = "key element [element ...]",  Summary = "Adds the specified elements to the specified HyperLogLog.", Group = 11, Since = "2.8.9" }},
                {"PFCOUNT", new CommandHelp { Name = "PFCOUNT",  Params = "key [key ...]",  Summary = "Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).", Group = 11, Since = "2.8.9" }},
                {"PFMERGE", new CommandHelp { Name = "PFMERGE",  Params = "destkey sourcekey [sourcekey ...]",  Summary = "Merge N different HyperLogLogs into a single one.", Group = 11, Since = "2.8.9" }},
                {"PING", new CommandHelp { Name = "PING",  Params = "[message]",  Summary = "Ping the server", Group = 8, Since = "1.0.0" }},
                {"PSETEX", new CommandHelp { Name = "PSETEX",  Params = "key milliseconds value",  Summary = "Set the value and expiration in milliseconds of a key", Group = 1, Since = "2.6.0" }},
                {"PSUBSCRIBE", new CommandHelp { Name = "PSUBSCRIBE",  Params = "pattern [pattern ...]",  Summary = "Listen for messages published to channels matching the given patterns", Group = 6, Since = "2.0.0" }},
                {"PTTL", new CommandHelp { Name = "PTTL",  Params = "key",  Summary = "Get the time to live for a key in milliseconds", Group = 0, Since = "2.6.0" }},
                {"PUBLISH", new CommandHelp { Name = "PUBLISH",  Params = "channel message",  Summary = "Post a message to a channel", Group = 6, Since = "2.0.0" }},
                {"PUBSUB", new CommandHelp { Name = "PUBSUB",  Params = "subcommand [argument [argument ...]]",  Summary = "Inspect the state of the Pub/Sub subsystem", Group = 6, Since = "2.8.0" }},
                {"PUNSUBSCRIBE", new CommandHelp { Name = "PUNSUBSCRIBE",  Params = "[pattern [pattern ...]]",  Summary = "Stop listening for messages posted to channels matching the given patterns", Group = 6, Since = "2.0.0" }},
                {"QUIT", new CommandHelp { Name = "QUIT",  Params = "-",  Summary = "Close the connection", Group = 8, Since = "1.0.0" }},
                {"RANDOMKEY", new CommandHelp { Name = "RANDOMKEY",  Params = "-",  Summary = "Return a random key from the keyspace", Group = 0, Since = "1.0.0" }},
                {"READONLY", new CommandHelp { Name = "READONLY",  Params = "-",  Summary = "Enables read queries for a connection to a cluster replica node", Group = 12, Since = "3.0.0" }},
                {"READWRITE", new CommandHelp { Name = "READWRITE",  Params = "-",  Summary = "Disables read queries for a connection to a cluster replica node", Group = 12, Since = "3.0.0" }},
                {"RENAME", new CommandHelp { Name = "RENAME",  Params = "key newkey",  Summary = "Rename a key", Group = 0, Since = "1.0.0" }},
                {"RENAMENX", new CommandHelp { Name = "RENAMENX",  Params = "key newkey",  Summary = "Rename a key, only if the new key does not exist", Group = 0, Since = "1.0.0" }},
                {"REPLICAOF", new CommandHelp { Name = "REPLICAOF",  Params = "host port",  Summary = "Make the server a replica of another instance, or promote it as master.", Group = 9, Since = "5.0.0" }},
                {"RESTORE", new CommandHelp { Name = "RESTORE",  Params = "key ttl serialized-value [REPLACE]",  Summary = "Create a key using the provided serialized value, previously obtained using DUMP.", Group = 0, Since = "2.6.0" }},
                {"ROLE", new CommandHelp { Name = "ROLE",  Params = "-",  Summary = "Return the role of the instance in the context of replication", Group = 9, Since = "2.8.12" }},
                {"RPOP", new CommandHelp { Name = "RPOP",  Params = "key",  Summary = "Remove and get the last element in a list", Group = 2, Since = "1.0.0" }},
                {"RPOPLPUSH", new CommandHelp { Name = "RPOPLPUSH",  Params = "source destination",  Summary = "Remove the last element in a list, prepend it to another list and return it", Group = 2, Since = "1.2.0" }},
                {"RPUSH", new CommandHelp { Name = "RPUSH",  Params = "key value [value ...]",  Summary = "Append one or multiple values to a list", Group = 2, Since = "1.0.0" }},
                {"RPUSHX", new CommandHelp { Name = "RPUSHX",  Params = "key value",  Summary = "Append a value to a list, only if the list exists", Group = 2, Since = "2.2.0" }},
                {"SADD", new CommandHelp { Name = "SADD",  Params = "key member [member ...]",  Summary = "Add one or more members to a set", Group = 3, Since = "1.0.0" }},
                {"SAVE", new CommandHelp { Name = "SAVE",  Params = "-",  Summary = "Synchronously save the dataset to disk", Group = 9, Since = "1.0.0" }},
                {"SCAN", new CommandHelp { Name = "SCAN",  Params = "cursor [MATCH pattern] [COUNT count]",  Summary = "Incrementally iterate the keys space", Group = 0, Since = "2.8.0" }},
                {"SCARD", new CommandHelp { Name = "SCARD",  Params = "key",  Summary = "Get the number of members in a set", Group = 3, Since = "1.0.0" }},
                {"SCRIPT DEBUG", new CommandHelp { Name = "SCRIPT DEBUG",  Params = "YES|SYNC|NO",  Summary = "Set the debug mode for executed scripts.", Group = 10, Since = "3.2.0" }},
                {"SCRIPT EXISTS", new CommandHelp { Name = "SCRIPT EXISTS",  Params = "sha1 [sha1 ...]",  Summary = "Check existence of scripts in the script cache.", Group = 10, Since = "2.6.0" }},
                {"SCRIPT FLUSH", new CommandHelp { Name = "SCRIPT FLUSH",  Params = "-",  Summary = "Remove all the scripts from the script cache.", Group = 10, Since = "2.6.0" }},
                {"SCRIPT KILL", new CommandHelp { Name = "SCRIPT KILL",  Params = "-",  Summary = "Kill the script currently in execution.", Group = 10, Since = "2.6.0" }},
                {"SCRIPT LOAD", new CommandHelp { Name = "SCRIPT LOAD",  Params = "script",  Summary = "Load the specified Lua script into the script cache.", Group = 10, Since = "2.6.0" }},
                {"SDIFF", new CommandHelp { Name = "SDIFF",  Params = "key [key ...]",  Summary = "Subtract multiple sets", Group = 3, Since = "1.0.0" }},
                {"SDIFFSTORE", new CommandHelp { Name = "SDIFFSTORE",  Params = "destination key [key ...]",  Summary = "Subtract multiple sets and store the resulting set in a key", Group = 3, Since = "1.0.0" }},
                {"SELECT", new CommandHelp { Name = "SELECT",  Params = "index",  Summary = "Change the selected database for the current connection", Group = 8, Since = "1.0.0" }},
                {"SET", new CommandHelp { Name = "SET",  Params = "key value [expiration EX seconds|PX milliseconds] [NX|XX]",  Summary = "Set the string value of a key", Group = 1, Since = "1.0.0" }},
                {"SETBIT", new CommandHelp { Name = "SETBIT",  Params = "key offset value",  Summary = "Sets or clears the bit at offset in the string value stored at key", Group = 1, Since = "2.2.0" }},
                {"SETEX", new CommandHelp { Name = "SETEX",  Params = "key seconds value",  Summary = "Set the value and expiration of a key", Group = 1, Since = "2.0.0" }},
                {"SETNX", new CommandHelp { Name = "SETNX",  Params = "key value",  Summary = "Set the value of a key, only if the key does not exist", Group = 1, Since = "1.0.0" }},
                {"SETRANGE", new CommandHelp { Name = "SETRANGE",  Params = "key offset value",  Summary = "Overwrite part of a string at key starting at the specified offset", Group = 1, Since = "2.2.0" }},
                {"SHUTDOWN", new CommandHelp { Name = "SHUTDOWN",  Params = "[NOSAVE|SAVE]",  Summary = "Synchronously save the dataset to disk and then shut down the server", Group = 9, Since = "1.0.0" }},
                {"SINTER", new CommandHelp { Name = "SINTER",  Params = "key [key ...]",  Summary = "Intersect multiple sets", Group = 3, Since = "1.0.0" }},
                {"SINTERSTORE", new CommandHelp { Name = "SINTERSTORE",  Params = "destination key [key ...]",  Summary = "Intersect multiple sets and store the resulting set in a key", Group = 3, Since = "1.0.0" }},
                {"SISMEMBER", new CommandHelp { Name = "SISMEMBER",  Params = "key member",  Summary = "Determine if a given value is a member of a set", Group = 3, Since = "1.0.0" }},
                {"SLAVEOF", new CommandHelp { Name = "SLAVEOF",  Params = "host port",  Summary = "Make the server a replica of another instance, or promote it as master. Deprecated starting with Redis 5. Use REPLICAOF instead.", Group = 9, Since = "1.0.0" }},
                {"SLOWLOG", new CommandHelp { Name = "SLOWLOG",  Params = "subcommand [argument]",  Summary = "Manages the Redis slow queries log", Group = 9, Since = "2.2.12" }},
                {"SMEMBERS", new CommandHelp { Name = "SMEMBERS",  Params = "key",  Summary = "Get all the members in a set", Group = 3, Since = "1.0.0" }},
                {"SMOVE", new CommandHelp { Name = "SMOVE",  Params = "source destination member",  Summary = "Move a member from one set to another", Group = 3, Since = "1.0.0" }},
                {"SORT", new CommandHelp { Name = "SORT",  Params = "key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]",  Summary = "Sort the elements in a list, set or sorted set", Group = 0, Since = "1.0.0" }},
                {"SPOP", new CommandHelp { Name = "SPOP",  Params = "key [count]",  Summary = "Remove and return one or multiple random members from a set", Group = 3, Since = "1.0.0" }},
                {"SRANDMEMBER", new CommandHelp { Name = "SRANDMEMBER",  Params = "key [count]",  Summary = "Get one or multiple random members from a set", Group = 3, Since = "1.0.0" }},
                {"SREM", new CommandHelp { Name = "SREM",  Params = "key member [member ...]",  Summary = "Remove one or more members from a set", Group = 3, Since = "1.0.0" }},
                {"SSCAN", new CommandHelp { Name = "SSCAN",  Params = "key cursor [MATCH pattern] [COUNT count]",  Summary = "Incrementally iterate Set elements", Group = 3, Since = "2.8.0" }},
                {"STRLEN", new CommandHelp { Name = "STRLEN",  Params = "key",  Summary = "Get the length of the value stored in a key", Group = 1, Since = "2.2.0" }},
                {"SUBSCRIBE", new CommandHelp { Name = "SUBSCRIBE",  Params = "channel [channel ...]",  Summary = "Listen for messages published to the given channels", Group = 6, Since = "2.0.0" }},
                {"SUNION", new CommandHelp { Name = "SUNION",  Params = "key [key ...]",  Summary = "Add multiple sets", Group = 3, Since = "1.0.0" }},
                {"SUNIONSTORE", new CommandHelp { Name = "SUNIONSTORE",  Params = "destination key [key ...]",  Summary = "Add multiple sets and store the resulting set in a key", Group = 3, Since = "1.0.0" }},
                {"SWAPDB", new CommandHelp { Name = "SWAPDB",  Params = "index index",  Summary = "Swaps two Redis databases", Group = 8, Since = "4.0.0" }},
                {"SYNC", new CommandHelp { Name = "SYNC",  Params = "-",  Summary = "Internal command used for replication", Group = 9, Since = "1.0.0" }},
                {"TIME", new CommandHelp { Name = "TIME",  Params = "-",  Summary = "Return the current server time", Group = 9, Since = "2.6.0" }},
                {"TOUCH", new CommandHelp { Name = "TOUCH",  Params = "key [key ...]",  Summary = "Alters the last access time of a key(s). Returns the number of existing keys specified.", Group = 0, Since = "3.2.1" }},
                {"TTL", new CommandHelp { Name = "TTL",  Params = "key",  Summary = "Get the time to live for a key", Group = 0, Since = "1.0.0" }},
                {"TYPE", new CommandHelp { Name = "TYPE",  Params = "key",  Summary = "Determine the type stored at key", Group = 0, Since = "1.0.0" }},
                {"UNLINK", new CommandHelp { Name = "UNLINK",  Params = "key [key ...]",  Summary = "Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.", Group = 0, Since = "4.0.0" }},
                {"UNSUBSCRIBE", new CommandHelp { Name = "UNSUBSCRIBE",  Params = "[channel [channel ...]]",  Summary = "Stop listening for messages posted to the given channels", Group = 6, Since = "2.0.0" }},
                {"UNWATCH", new CommandHelp { Name = "UNWATCH",  Params = "-",  Summary = "Forget about all watched keys", Group = 7, Since = "2.2.0" }},
                {"WAIT", new CommandHelp { Name = "WAIT",  Params = "numreplicas timeout",  Summary = "Wait for the synchronous replication of all the write commands sent in the context of the current connection", Group = 0, Since = "3.0.0" }},
                {"WATCH", new CommandHelp { Name = "WATCH",  Params = "key [key ...]",  Summary = "Watch the given keys to determine execution of the MULTI/EXEC block", Group = 7, Since = "2.2.0" }},
                {"XACK", new CommandHelp { Name = "XACK",  Params = "key group ID [ID ...]",  Summary = "Marks a pending message as correctly processed, effectively removing it from the pending entries list of the consumer group. Return value of the command is the number of messages successfully acknowledged, that is, the IDs we were actually able to resolve in the PEL.", Group = 14, Since = "5.0.0" }},
                {"XADD", new CommandHelp { Name = "XADD",  Params = "key ID field string [field string ...]",  Summary = "Appends a new entry to a stream", Group = 14, Since = "5.0.0" }},
                {"XCLAIM", new CommandHelp { Name = "XCLAIM",  Params = "key group consumer min-idle-time ID [ID ...] [IDLE ms] [TIME ms-unix-time] [RETRYCOUNT count] [force] [justid]",  Summary = "Changes (or acquires) ownership of a message in a consumer group, as if the message was delivered to the specified consumer.", Group = 14, Since = "5.0.0" }},
                {"XDEL", new CommandHelp { Name = "XDEL",  Params = "key ID [ID ...]",  Summary = "Removes the specified entries from the stream. Returns the number of items actually deleted, that may be different from the number of IDs passed in case certain IDs do not exist.", Group = 14, Since = "5.0.0" }},
                {"XGROUP", new CommandHelp { Name = "XGROUP",  Params = "[CREATE key groupname id-or-$] [SETID key id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername]",  Summary = "Create, destroy, and manage consumer groups.", Group = 14, Since = "5.0.0" }},
                {"XINFO", new CommandHelp { Name = "XINFO",  Params = "[CONSUMERS key groupname] [GROUPS key] [STREAM key] [HELP]",  Summary = "Get information on streams and consumer groups", Group = 14, Since = "5.0.0" }},
                {"XLEN", new CommandHelp { Name = "XLEN",  Params = "key",  Summary = "Return the number of entires in a stream", Group = 14, Since = "5.0.0" }},
                {"XPENDING", new CommandHelp { Name = "XPENDING",  Params = "key group [start end count] [consumer]",  Summary = "Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.", Group = 14, Since = "5.0.0" }},
                {"XRANGE", new CommandHelp { Name = "XRANGE",  Params = "key start end [COUNT count]",  Summary = "Return a range of elements in a stream, with IDs matching the specified IDs interval", Group = 14, Since = "5.0.0" }},
                {"XREAD", new CommandHelp { Name = "XREAD",  Params = "[COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]",  Summary = "Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.", Group = 14, Since = "5.0.0" }},
                {"XREADGROUP", new CommandHelp { Name = "XREADGROUP",  Params = "GROUP group consumer [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]",  Summary = "Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.", Group = 14, Since = "5.0.0" }},
                {"XREVRANGE", new CommandHelp { Name = "XREVRANGE",  Params = "key end start [COUNT count]",  Summary = "Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE", Group = 14, Since = "5.0.0" }},
                {"XTRIM", new CommandHelp { Name = "XTRIM",  Params = "key MAXLEN [~] count",  Summary = "Trims the stream to (approximately if '~' is passed) a certain size", Group = 14, Since = "5.0.0" }},
                {"ZADD", new CommandHelp { Name = "ZADD",  Params = "key [NX|XX] [CH] [INCR] score member [score member ...]",  Summary = "Add one or more members to a sorted set, or update its score if it already exists", Group = 4, Since = "1.2.0" }},
                {"ZCARD", new CommandHelp { Name = "ZCARD",  Params = "key",  Summary = "Get the number of members in a sorted set", Group = 4, Since = "1.2.0" }},
                {"ZCOUNT", new CommandHelp { Name = "ZCOUNT",  Params = "key min max",  Summary = "Count the members in a sorted set with scores within the given values", Group = 4, Since = "2.0.0" }},
                {"ZINCRBY", new CommandHelp { Name = "ZINCRBY",  Params = "key increment member",  Summary = "Increment the score of a member in a sorted set", Group = 4, Since = "1.2.0" }},
                {"ZINTERSTORE", new CommandHelp { Name = "ZINTERSTORE",  Params = "destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]",  Summary = "Intersect multiple sorted sets and store the resulting sorted set in a new key", Group = 4, Since = "2.0.0" }},
                {"ZLEXCOUNT", new CommandHelp { Name = "ZLEXCOUNT",  Params = "key min max",  Summary = "Count the number of members in a sorted set between a given lexicographical range", Group = 4, Since = "2.8.9" }},
                {"ZPOPMAX", new CommandHelp { Name = "ZPOPMAX",  Params = "key [count]",  Summary = "Remove and return members with the highest scores in a sorted set", Group = 4, Since = "5.0.0" }},
                {"ZPOPMIN", new CommandHelp { Name = "ZPOPMIN",  Params = "key [count]",  Summary = "Remove and return members with the lowest scores in a sorted set", Group = 4, Since = "5.0.0" }},
                {"ZRANGE", new CommandHelp { Name = "ZRANGE",  Params = "key start stop [WITHSCORES]",  Summary = "Return a range of members in a sorted set, by index", Group = 4, Since = "1.2.0" }},
                {"ZRANGEBYLEX", new CommandHelp { Name = "ZRANGEBYLEX",  Params = "key min max [LIMIT offset count]",  Summary = "Return a range of members in a sorted set, by lexicographical range", Group = 4, Since = "2.8.9" }},
                {"ZRANGEBYSCORE", new CommandHelp { Name = "ZRANGEBYSCORE",  Params = "key min max [WITHSCORES] [LIMIT offset count]",  Summary = "Return a range of members in a sorted set, by score", Group = 4, Since = "1.0.5" }},
                {"ZRANK", new CommandHelp { Name = "ZRANK",  Params = "key member",  Summary = "Determine the index of a member in a sorted set", Group = 4, Since = "2.0.0" }},
                {"ZREM", new CommandHelp { Name = "ZREM",  Params = "key member [member ...]",  Summary = "Remove one or more members from a sorted set", Group = 4, Since = "1.2.0" }},
                {"ZREMRANGEBYLEX", new CommandHelp { Name = "ZREMRANGEBYLEX",  Params = "key min max",  Summary = "Remove all members in a sorted set between the given lexicographical range", Group = 4, Since = "2.8.9" }},
                {"ZREMRANGEBYRANK", new CommandHelp { Name = "ZREMRANGEBYRANK",  Params = "key start stop",  Summary = "Remove all members in a sorted set within the given indexes", Group = 4, Since = "2.0.0" }},
                {"ZREMRANGEBYSCORE", new CommandHelp { Name = "ZREMRANGEBYSCORE",  Params = "key min max",  Summary = "Remove all members in a sorted set within the given scores", Group = 4, Since = "1.2.0" }},
                {"ZREVRANGE", new CommandHelp { Name = "ZREVRANGE",  Params = "key start stop [WITHSCORES]",  Summary = "Return a range of members in a sorted set, by index, with scores ordered from high to low", Group = 4, Since = "1.2.0" }},
                {"ZREVRANGEBYLEX", new CommandHelp { Name = "ZREVRANGEBYLEX",  Params = "key max min [LIMIT offset count]",  Summary = "Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.", Group = 4, Since = "2.8.9" }},
                {"ZREVRANGEBYSCORE", new CommandHelp { Name = "ZREVRANGEBYSCORE",  Params = "key max min [WITHSCORES] [LIMIT offset count]",  Summary = "Return a range of members in a sorted set, by score, with scores ordered from high to low", Group = 4, Since = "2.2.0" }},
                {"ZREVRANK", new CommandHelp { Name = "ZREVRANK",  Params = "key member",  Summary = "Determine the index of a member in a sorted set, with scores ordered from high to low", Group = 4, Since = "2.0.0" }},
                {"ZSCAN", new CommandHelp { Name = "ZSCAN",  Params = "key cursor [MATCH pattern] [COUNT count]",  Summary = "Incrementally iterate sorted sets elements and associated scores", Group = 4, Since = "2.8.0" }},
                {"ZSCORE", new CommandHelp { Name = "ZSCORE",  Params = "key member",  Summary = "Get the score associated with the given member in a sorted set", Group = 4, Since = "1.2.0" }},
                {"ZUNIONSTORE", new CommandHelp { Name = "ZUNIONSTORE",  Params = "destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]",  Summary = "Add multiple sorted sets and store the resulting sorted set in a new key", Group = 4, Since = "2.0.0" }}
        };


        }
    }
}
