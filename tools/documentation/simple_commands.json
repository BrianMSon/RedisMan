[	{"Command": "ACL", "Summary": "A container for Access List Control commands ", "Arguments": "", "Since": "6.0.0", "Group": "server"},
	{"Command": "ACL CAT", "Summary": "List the ACL categories or the commands inside a category", "Arguments": "[categoryname]", "Since": "6.0.0", "Group": "server"},
	{"Command": "ACL DELUSER", "Summary": "Remove the specified ACL users and the associated rules", "Arguments": "username [username ...]", "Since": "6.0.0", "Group": "server"},
	{"Command": "ACL DRYRUN", "Summary": "Returns whether the user can execute the given command without executing the command.", "Arguments": "username command [arg [arg ...]]", "Since": "7.0.0", "Group": "server"},
	{"Command": "ACL GENPASS", "Summary": "Generate a pseudorandom secure password to use for ACL users", "Arguments": "[bits]", "Since": "6.0.0", "Group": "server"},
	{"Command": "ACL GETUSER", "Summary": "Get the rules for a specific ACL user", "Arguments": "username", "Since": "6.0.0", "Group": "server"},
	{"Command": "ACL HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "6.0.0", "Group": "server"},
	{"Command": "ACL LIST", "Summary": "List the current ACL rules in ACL config file format", "Arguments": "", "Since": "6.0.0", "Group": "server"},
	{"Command": "ACL LOAD", "Summary": "Reload the ACLs from the configured ACL file", "Arguments": "", "Since": "6.0.0", "Group": "server"},
	{"Command": "ACL LOG", "Summary": "List latest events denied because of ACLs in place", "Arguments": "[count|RESET]", "Since": "6.0.0", "Group": "server"},
	{"Command": "ACL SAVE", "Summary": "Save the current ACL rules in the configured ACL file", "Arguments": "", "Since": "6.0.0", "Group": "server"},
	{"Command": "ACL SETUSER", "Summary": "Modify or create the rules for a specific ACL user", "Arguments": "username [rule [rule ...]]", "Since": "6.0.0", "Group": "server"},
	{"Command": "ACL USERS", "Summary": "List the username of all the configured ACL rules", "Arguments": "", "Since": "6.0.0", "Group": "server"},
	{"Command": "ACL WHOAMI", "Summary": "Return the name of the user associated to the current connection", "Arguments": "", "Since": "6.0.0", "Group": "server"},
	{"Command": "APPEND", "Summary": "Append a value to a key", "Arguments": "key value", "Since": "2.0.0", "Group": "string"},
	{"Command": "ASKING", "Summary": "Sent by cluster clients after an -ASK redirect", "Arguments": "", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "AUTH", "Summary": "Authenticate to the server", "Arguments": "[username] password", "Since": "1.0.0", "Group": "connection"},
	{"Command": "BGREWRITEAOF", "Summary": "Asynchronously rewrite the append-only file", "Arguments": "", "Since": "1.0.0", "Group": "server"},
	{"Command": "BGSAVE", "Summary": "Asynchronously save the dataset to disk", "Arguments": "[SCHEDULE]", "Since": "1.0.0", "Group": "server"},
	{"Command": "BITCOUNT", "Summary": "Count set bits in a string", "Arguments": "key [start end [BYTE|BIT]]", "Since": "2.6.0", "Group": "bitmap"},
	{"Command": "BITFIELD", "Summary": "Perform arbitrary bitfield integer operations on strings", "Arguments": "key GET encoding offset|[OVERFLOW WRAP|SAT|FAIL] SET encoding offset value|INCRBY encoding offset increment [GET encoding offset|[OVERFLOW WRAP|SAT|FAIL] SET encoding offset value|INCRBY encoding offset increment ...]", "Since": "3.2.0", "Group": "bitmap"},
	{"Command": "BITFIELD_RO", "Summary": "Perform arbitrary bitfield integer operations on strings. Read-only variant of BITFIELD", "Arguments": "key GET encoding offset [GET encoding offset ...]", "Since": "6.0.0", "Group": "bitmap"},
	{"Command": "BITOP", "Summary": "Perform bitwise operations between strings", "Arguments": "operation destkey key [key ...]", "Since": "2.6.0", "Group": "bitmap"},
	{"Command": "BITPOS", "Summary": "Find first bit set or clear in a string", "Arguments": "key bit [start [end [BYTE|BIT]]]", "Since": "2.8.7", "Group": "bitmap"},
	{"Command": "BLMOVE", "Summary": "Pop an element from a list, push it to another list and return it; or block until one is available", "Arguments": "source destination LEFT|RIGHT LEFT|RIGHT timeout", "Since": "6.2.0", "Group": "list"},
	{"Command": "BLMPOP", "Summary": "Pop elements from a list, or block until one is available", "Arguments": "timeout numkeys key [key ...] LEFT|RIGHT [COUNT count]", "Since": "7.0.0", "Group": "list"},
	{"Command": "BLPOP", "Summary": "Remove and get the first element in a list, or block until one is available", "Arguments": "key [key ...] timeout", "Since": "2.0.0", "Group": "list"},
	{"Command": "BRPOP", "Summary": "Remove and get the last element in a list, or block until one is available", "Arguments": "key [key ...] timeout", "Since": "2.0.0", "Group": "list"},
	{"Command": "BRPOPLPUSH", "Summary": "Pop an element from a list, push it to another list and return it; or block until one is available", "Arguments": "source destination timeout", "Since": "2.2.0", "Group": "list"},
	{"Command": "BZMPOP", "Summary": "Remove and return members with scores in a sorted set or block until one is available", "Arguments": "timeout numkeys key [key ...] MIN|MAX [COUNT count]", "Since": "7.0.0", "Group": "sorted-set"},
	{"Command": "BZPOPMAX", "Summary": "Remove and return the member with the highest score from one or more sorted sets, or block until one is available", "Arguments": "key [key ...] timeout", "Since": "5.0.0", "Group": "sorted-set"},
	{"Command": "BZPOPMIN", "Summary": "Remove and return the member with the lowest score from one or more sorted sets, or block until one is available", "Arguments": "key [key ...] timeout", "Since": "5.0.0", "Group": "sorted-set"},
	{"Command": "CLIENT", "Summary": "A container for client connection commands", "Arguments": "", "Since": "2.4.0", "Group": "connection"},
	{"Command": "CLIENT CACHING", "Summary": "Instruct the server about tracking or not keys in the next request", "Arguments": "YES|NO", "Since": "6.0.0", "Group": "connection"},
	{"Command": "CLIENT GETNAME", "Summary": "Get the current connection name", "Arguments": "", "Since": "2.6.9", "Group": "connection"},
	{"Command": "CLIENT GETREDIR", "Summary": "Get tracking notifications redirection client ID if any", "Arguments": "", "Since": "6.0.0", "Group": "connection"},
	{"Command": "CLIENT HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "5.0.0", "Group": "connection"},
	{"Command": "CLIENT ID", "Summary": "Returns the client ID for the current connection", "Arguments": "", "Since": "5.0.0", "Group": "connection"},
	{"Command": "CLIENT INFO", "Summary": "Returns information about the current client connection.", "Arguments": "", "Since": "6.2.0", "Group": "connection"},
	{"Command": "CLIENT KILL", "Summary": "Kill the connection of a client", "Arguments": "ip:port|[ID client-id]|[TYPE NORMAL|MASTER|SLAVE|REPLICA|PUBSUB]|[USER username]|[ADDR ip:port]|[LADDR ip:port]|[SKIPME yes/no] [[ID client-id]|[TYPE NORMAL|MASTER|SLAVE|REPLICA|PUBSUB]|[USER username]|[ADDR ip:port]|[LADDR ip:port]|[SKIPME yes/no] ...]", "Since": "2.4.0", "Group": "connection"},
	{"Command": "CLIENT LIST", "Summary": "Get the list of client connections", "Arguments": "[TYPE NORMAL|MASTER|REPLICA|PUBSUB] [ID client-id [client-id ...]]", "Since": "2.4.0", "Group": "connection"},
	{"Command": "CLIENT NO-EVICT", "Summary": "Set client eviction mode for the current connection", "Arguments": "ON|OFF", "Since": "7.0.0", "Group": "connection"},
	{"Command": "CLIENT PAUSE", "Summary": "Stop processing commands from clients for some time", "Arguments": "timeout [WRITE|ALL]", "Since": "2.9.50", "Group": "connection"},
	{"Command": "CLIENT REPLY", "Summary": "Instruct the server whether to reply to commands", "Arguments": "ON|OFF|SKIP", "Since": "3.2.0", "Group": "connection"},
	{"Command": "CLIENT SETNAME", "Summary": "Set the current connection name", "Arguments": "connection-name", "Since": "2.6.9", "Group": "connection"},
	{"Command": "CLIENT TRACKING", "Summary": "Enable or disable server assisted client side caching support", "Arguments": "ON|OFF [REDIRECT client-id] [PREFIX prefix [PREFIX prefix ...]] [BCAST] [OPTIN] [OPTOUT] [NOLOOP]", "Since": "6.0.0", "Group": "connection"},
	{"Command": "CLIENT TRACKINGINFO", "Summary": "Return information about server assisted client side caching for the current connection", "Arguments": "", "Since": "6.2.0", "Group": "connection"},
	{"Command": "CLIENT UNBLOCK", "Summary": "Unblock a client blocked in a blocking command from a different connection", "Arguments": "client-id [TIMEOUT|ERROR]", "Since": "5.0.0", "Group": "connection"},
	{"Command": "CLIENT UNPAUSE", "Summary": "Resume processing of clients that were paused", "Arguments": "", "Since": "6.2.0", "Group": "connection"},
	{"Command": "CLUSTER", "Summary": "A container for cluster commands", "Arguments": "", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER ADDSLOTS", "Summary": "Assign new hash slots to receiving node", "Arguments": "slot [slot ...]", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER ADDSLOTSRANGE", "Summary": "Assign new hash slots to receiving node", "Arguments": "start-slot end-slot [start-slot end-slot ...]", "Since": "7.0.0", "Group": "cluster"},
	{"Command": "CLUSTER BUMPEPOCH", "Summary": "Advance the cluster config epoch", "Arguments": "", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER COUNT-FAILURE-REPORTS", "Summary": "Return the number of failure reports active for a given node", "Arguments": "node-id", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER COUNTKEYSINSLOT", "Summary": "Return the number of local keys in the specified hash slot", "Arguments": "slot", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER DELSLOTS", "Summary": "Set hash slots as unbound in receiving node", "Arguments": "slot [slot ...]", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER DELSLOTSRANGE", "Summary": "Set hash slots as unbound in receiving node", "Arguments": "start-slot end-slot [start-slot end-slot ...]", "Since": "7.0.0", "Group": "cluster"},
	{"Command": "CLUSTER FAILOVER", "Summary": "Forces a replica to perform a manual failover of its master.", "Arguments": "[FORCE|TAKEOVER]", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER FLUSHSLOTS", "Summary": "Delete a node's own slots information", "Arguments": "", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER FORGET", "Summary": "Remove a node from the nodes table", "Arguments": "node-id", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER GETKEYSINSLOT", "Summary": "Return local key names in the specified hash slot", "Arguments": "slot count", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "5.0.0", "Group": "cluster"},
	{"Command": "CLUSTER INFO", "Summary": "Provides info about Redis Cluster node state", "Arguments": "", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER KEYSLOT", "Summary": "Returns the hash slot of the specified key", "Arguments": "key", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER LINKS", "Summary": "Returns a list of all TCP links to and from peer nodes in cluster", "Arguments": "", "Since": "7.0.0", "Group": "cluster"},
	{"Command": "CLUSTER MEET", "Summary": "Force a node cluster to handshake with another node", "Arguments": "ip port [cluster_bus_port]", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER MYID", "Summary": "Return the node id", "Arguments": "", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER NODES", "Summary": "Get Cluster config for the node", "Arguments": "", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER REPLICAS", "Summary": "List replica nodes of the specified master node", "Arguments": "node-id", "Since": "5.0.0", "Group": "cluster"},
	{"Command": "CLUSTER REPLICATE", "Summary": "Reconfigure a node as a replica of the specified master node", "Arguments": "node-id", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER RESET", "Summary": "Reset a Redis Cluster node", "Arguments": "[HARD|SOFT]", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER SAVECONFIG", "Summary": "Forces the node to save cluster state on disk", "Arguments": "", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER SET-CONFIG-EPOCH", "Summary": "Set the configuration epoch in a new node", "Arguments": "config-epoch", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER SETSLOT", "Summary": "Bind a hash slot to a specific node", "Arguments": "slot IMPORTING node-id|MIGRATING node-id|NODE node-id|STABLE", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER SHARDS", "Summary": "Get array of cluster slots to node mappings", "Arguments": "", "Since": "7.0.0", "Group": "cluster"},
	{"Command": "CLUSTER SLAVES", "Summary": "List replica nodes of the specified master node", "Arguments": "node-id", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "CLUSTER SLOTS", "Summary": "Get array of Cluster slot to node mappings", "Arguments": "", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "COMMAND", "Summary": "Get array of Redis command details", "Arguments": "", "Since": "2.8.13", "Group": "server"},
	{"Command": "COMMAND COUNT", "Summary": "Get total number of Redis commands", "Arguments": "", "Since": "2.8.13", "Group": "server"},
	{"Command": "COMMAND DOCS", "Summary": "Get array of specific Redis command documentation", "Arguments": "[command-name [command-name ...]]", "Since": "7.0.0", "Group": "server"},
	{"Command": "COMMAND GETKEYS", "Summary": "Extract keys given a full Redis command", "Arguments": "", "Since": "2.8.13", "Group": "server"},
	{"Command": "COMMAND GETKEYSANDFLAGS", "Summary": "Extract keys and access flags given a full Redis command", "Arguments": "", "Since": "7.0.0", "Group": "server"},
	{"Command": "COMMAND HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "5.0.0", "Group": "server"},
	{"Command": "COMMAND INFO", "Summary": "Get array of specific Redis command details, or all when no argument is given.", "Arguments": "[command-name [command-name ...]]", "Since": "2.8.13", "Group": "server"},
	{"Command": "COMMAND LIST", "Summary": "Get an array of Redis command names", "Arguments": "[FILTERBY MODULE module-name|ACLCAT category|PATTERN pattern]", "Since": "7.0.0", "Group": "server"},
	{"Command": "CONFIG", "Summary": "A container for server configuration commands", "Arguments": "", "Since": "2.0.0", "Group": "server"},
	{"Command": "CONFIG GET", "Summary": "Get the values of configuration parameters", "Arguments": "parameter [parameter ...]", "Since": "2.0.0", "Group": "server"},
	{"Command": "CONFIG HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "5.0.0", "Group": "server"},
	{"Command": "CONFIG RESETSTAT", "Summary": "Reset the stats returned by INFO", "Arguments": "", "Since": "2.0.0", "Group": "server"},
	{"Command": "CONFIG REWRITE", "Summary": "Rewrite the configuration file with the in memory configuration", "Arguments": "", "Since": "2.8.0", "Group": "server"},
	{"Command": "CONFIG SET", "Summary": "Set configuration parameters to the given values", "Arguments": "parameter value [parameter value ...]", "Since": "2.0.0", "Group": "server"},
	{"Command": "COPY", "Summary": "Copy a key", "Arguments": "source destination [DB destination-db] [REPLACE]", "Since": "6.2.0", "Group": "generic"},
	{"Command": "DBSIZE", "Summary": "Return the number of keys in the selected database", "Arguments": "", "Since": "1.0.0", "Group": "server"},
	{"Command": "DEBUG", "Summary": "A container for debugging commands", "Arguments": "", "Since": "1.0.0", "Group": "server"},
	{"Command": "DECR", "Summary": "Decrement the integer value of a key by one", "Arguments": "key", "Since": "1.0.0", "Group": "string"},
	{"Command": "DECRBY", "Summary": "Decrement the integer value of a key by the given number", "Arguments": "key decrement", "Since": "1.0.0", "Group": "string"},
	{"Command": "DEL", "Summary": "Delete a key", "Arguments": "key [key ...]", "Since": "1.0.0", "Group": "generic"},
	{"Command": "DISCARD", "Summary": "Discard all commands issued after MULTI", "Arguments": "", "Since": "2.0.0", "Group": "transactions"},
	{"Command": "DUMP", "Summary": "Return a serialized version of the value stored at the specified key.", "Arguments": "key", "Since": "2.6.0", "Group": "generic"},
	{"Command": "ECHO", "Summary": "Echo the given string", "Arguments": "message", "Since": "1.0.0", "Group": "connection"},
	{"Command": "EVAL", "Summary": "Execute a Lua script server side", "Arguments": "script numkeys [key [key ...]] [arg [arg ...]]", "Since": "2.6.0", "Group": "scripting"},
	{"Command": "EVALSHA", "Summary": "Execute a Lua script server side", "Arguments": "sha1 numkeys [key [key ...]] [arg [arg ...]]", "Since": "2.6.0", "Group": "scripting"},
	{"Command": "EVALSHA_RO", "Summary": "Execute a read-only Lua script server side", "Arguments": "sha1 numkeys [key [key ...]] [arg [arg ...]]", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "EVAL_RO", "Summary": "Execute a read-only Lua script server side", "Arguments": "script numkeys [key [key ...]] [arg [arg ...]]", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "EXEC", "Summary": "Execute all commands issued after MULTI", "Arguments": "", "Since": "1.2.0", "Group": "transactions"},
	{"Command": "EXISTS", "Summary": "Determine if a key exists", "Arguments": "key [key ...]", "Since": "1.0.0", "Group": "generic"},
	{"Command": "EXPIRE", "Summary": "Set a key's time to live in seconds", "Arguments": "key seconds [NX|XX|GT|LT]", "Since": "1.0.0", "Group": "generic"},
	{"Command": "EXPIREAT", "Summary": "Set the expiration for a key as a UNIX timestamp", "Arguments": "key unix-time-seconds [NX|XX|GT|LT]", "Since": "1.2.0", "Group": "generic"},
	{"Command": "EXPIRETIME", "Summary": "Get the expiration Unix timestamp for a key", "Arguments": "key", "Since": "7.0.0", "Group": "generic"},
	{"Command": "FAILOVER", "Summary": "Start a coordinated failover between this server and one of its replicas.", "Arguments": "[TO host port [FORCE]] [ABORT] [TIMEOUT milliseconds]", "Since": "6.2.0", "Group": "server"},
	{"Command": "FCALL", "Summary": "Invoke a function", "Arguments": "function numkeys [key [key ...]] [arg [arg ...]]", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "FCALL_RO", "Summary": "Invoke a read-only function", "Arguments": "function numkeys [key [key ...]] [arg [arg ...]]", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "FLUSHALL", "Summary": "Remove all keys from all databases", "Arguments": "[ASYNC|SYNC]", "Since": "1.0.0", "Group": "server"},
	{"Command": "FLUSHDB", "Summary": "Remove all keys from the current database", "Arguments": "[ASYNC|SYNC]", "Since": "1.0.0", "Group": "server"},
	{"Command": "FUNCTION", "Summary": "A container for function commands", "Arguments": "", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "FUNCTION DELETE", "Summary": "Delete a function by name", "Arguments": "library-name", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "FUNCTION DUMP", "Summary": "Dump all functions into a serialized binary payload", "Arguments": "", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "FUNCTION FLUSH", "Summary": "Deleting all functions", "Arguments": "[ASYNC|SYNC]", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "FUNCTION HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "FUNCTION KILL", "Summary": "Kill the function currently in execution.", "Arguments": "", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "FUNCTION LIST", "Summary": "List information about all the functions", "Arguments": "[LIBRARYNAME library-name-pattern] [WITHCODE]", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "FUNCTION LOAD", "Summary": "Create a function with the given arguments (name, code, description)", "Arguments": "[REPLACE] function-code", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "FUNCTION RESTORE", "Summary": "Restore all the functions on the given payload", "Arguments": "serialized-value [FLUSH|APPEND|REPLACE]", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "FUNCTION STATS", "Summary": "Return information about the function currently running (name, description, duration)", "Arguments": "", "Since": "7.0.0", "Group": "scripting"},
	{"Command": "GEOADD", "Summary": "Add one or more geospatial items in the geospatial index represented using a sorted set", "Arguments": "key [NX|XX] [CH] longitude latitude member [longitude latitude member ...]", "Since": "3.2.0", "Group": "geo"},
	{"Command": "GEODIST", "Summary": "Returns the distance between two members of a geospatial index", "Arguments": "key member1 member2 [M|KM|FT|MI]", "Since": "3.2.0", "Group": "geo"},
	{"Command": "GEOHASH", "Summary": "Returns members of a geospatial index as standard geohash strings", "Arguments": "key member [member ...]", "Since": "3.2.0", "Group": "geo"},
	{"Command": "GEOPOS", "Summary": "Returns longitude and latitude of members of a geospatial index", "Arguments": "key member [member ...]", "Since": "3.2.0", "Group": "geo"},
	{"Command": "GEORADIUS", "Summary": "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point", "Arguments": "key longitude latitude radius M|KM|FT|MI [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC|DESC] [STORE key] [STOREDIST key]", "Since": "3.2.0", "Group": "geo"},
	{"Command": "GEORADIUSBYMEMBER", "Summary": "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member", "Arguments": "key member radius M|KM|FT|MI [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC|DESC] [STORE key] [STOREDIST key]", "Since": "3.2.0", "Group": "geo"},
	{"Command": "GEORADIUSBYMEMBER_RO", "Summary": "A read-only variant for GEORADIUSBYMEMBER", "Arguments": "key member radius M|KM|FT|MI [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC|DESC]", "Since": "3.2.10", "Group": "geo"},
	{"Command": "GEORADIUS_RO", "Summary": "A read-only variant for GEORADIUS", "Arguments": "key longitude latitude radius M|KM|FT|MI [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC|DESC]", "Since": "3.2.10", "Group": "geo"},
	{"Command": "GEOSEARCH", "Summary": "Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle.", "Arguments": "key FROMMEMBER member|FROMLONLAT longitude latitude BYRADIUS radius M|KM|FT|MI|BYBOX width height M|KM|FT|MI [ASC|DESC] [COUNT count [ANY]] [WITHCOORD] [WITHDIST] [WITHHASH]", "Since": "6.2.0", "Group": "geo"},
	{"Command": "GEOSEARCHSTORE", "Summary": "Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle, and store the result in another key.", "Arguments": "destination source FROMMEMBER member|FROMLONLAT longitude latitude BYRADIUS radius M|KM|FT|MI|BYBOX width height M|KM|FT|MI [ASC|DESC] [COUNT count [ANY]] [STOREDIST]", "Since": "6.2.0", "Group": "geo"},
	{"Command": "GET", "Summary": "Get the value of a key", "Arguments": "key", "Since": "1.0.0", "Group": "string"},
	{"Command": "GETBIT", "Summary": "Returns the bit value at offset in the string value stored at key", "Arguments": "key offset", "Since": "2.2.0", "Group": "bitmap"},
	{"Command": "GETDEL", "Summary": "Get the value of a key and delete the key", "Arguments": "key", "Since": "6.2.0", "Group": "string"},
	{"Command": "GETEX", "Summary": "Get the value of a key and optionally set its expiration", "Arguments": "key [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|PERSIST]", "Since": "6.2.0", "Group": "string"},
	{"Command": "GETRANGE", "Summary": "Get a substring of the string stored at a key", "Arguments": "key start end", "Since": "2.4.0", "Group": "string"},
	{"Command": "GETSET", "Summary": "Set the string value of a key and return its old value", "Arguments": "key value", "Since": "1.0.0", "Group": "string"},
	{"Command": "HDEL", "Summary": "Delete one or more hash fields", "Arguments": "key field [field ...]", "Since": "2.0.0", "Group": "hash"},
	{"Command": "HELLO", "Summary": "Handshake with Redis", "Arguments": "[protover [AUTH username password] [SETNAME clientname]]", "Since": "6.0.0", "Group": "connection"},
	{"Command": "HEXISTS", "Summary": "Determine if a hash field exists", "Arguments": "key field", "Since": "2.0.0", "Group": "hash"},
	{"Command": "HGET", "Summary": "Get the value of a hash field", "Arguments": "key field", "Since": "2.0.0", "Group": "hash"},
	{"Command": "HGETALL", "Summary": "Get all the fields and values in a hash", "Arguments": "key", "Since": "2.0.0", "Group": "hash"},
	{"Command": "HINCRBY", "Summary": "Increment the integer value of a hash field by the given number", "Arguments": "key field increment", "Since": "2.0.0", "Group": "hash"},
	{"Command": "HINCRBYFLOAT", "Summary": "Increment the float value of a hash field by the given amount", "Arguments": "key field increment", "Since": "2.6.0", "Group": "hash"},
	{"Command": "HKEYS", "Summary": "Get all the fields in a hash", "Arguments": "key", "Since": "2.0.0", "Group": "hash"},
	{"Command": "HLEN", "Summary": "Get the number of fields in a hash", "Arguments": "key", "Since": "2.0.0", "Group": "hash"},
	{"Command": "HMGET", "Summary": "Get the values of all the given hash fields", "Arguments": "key field [field ...]", "Since": "2.0.0", "Group": "hash"},
	{"Command": "HMSET", "Summary": "Set multiple hash fields to multiple values", "Arguments": "key field value [field value ...]", "Since": "2.0.0", "Group": "hash"},
	{"Command": "HRANDFIELD", "Summary": "Get one or multiple random fields from a hash", "Arguments": "key [count [WITHVALUES]]", "Since": "6.2.0", "Group": "hash"},
	{"Command": "HSCAN", "Summary": "Incrementally iterate hash fields and associated values", "Arguments": "key cursor [MATCH pattern] [COUNT count]", "Since": "2.8.0", "Group": "hash"},
	{"Command": "HSET", "Summary": "Set the string value of a hash field", "Arguments": "key field value [field value ...]", "Since": "2.0.0", "Group": "hash"},
	{"Command": "HSETNX", "Summary": "Set the value of a hash field, only if the field does not exist", "Arguments": "key field value", "Since": "2.0.0", "Group": "hash"},
	{"Command": "HSTRLEN", "Summary": "Get the length of the value of a hash field", "Arguments": "key field", "Since": "3.2.0", "Group": "hash"},
	{"Command": "HVALS", "Summary": "Get all the values in a hash", "Arguments": "key", "Since": "2.0.0", "Group": "hash"},
	{"Command": "INCR", "Summary": "Increment the integer value of a key by one", "Arguments": "key", "Since": "1.0.0", "Group": "string"},
	{"Command": "INCRBY", "Summary": "Increment the integer value of a key by the given amount", "Arguments": "key increment", "Since": "1.0.0", "Group": "string"},
	{"Command": "INCRBYFLOAT", "Summary": "Increment the float value of a key by the given amount", "Arguments": "key increment", "Since": "2.6.0", "Group": "string"},
	{"Command": "INFO", "Summary": "Get information and statistics about the server", "Arguments": "[section [section ...]]", "Since": "1.0.0", "Group": "server"},
	{"Command": "KEYS", "Summary": "Find all keys matching the given pattern", "Arguments": "pattern", "Since": "1.0.0", "Group": "generic"},
	{"Command": "LASTSAVE", "Summary": "Get the UNIX time stamp of the last successful save to disk", "Arguments": "", "Since": "1.0.0", "Group": "server"},
	{"Command": "LATENCY", "Summary": "A container for latency diagnostics commands", "Arguments": "", "Since": "2.8.13", "Group": "server"},
	{"Command": "LATENCY DOCTOR", "Summary": "Return a human readable latency analysis report.", "Arguments": "", "Since": "2.8.13", "Group": "server"},
	{"Command": "LATENCY GRAPH", "Summary": "Return a latency graph for the event.", "Arguments": "event", "Since": "2.8.13", "Group": "server"},
	{"Command": "LATENCY HELP", "Summary": "Show helpful text about the different subcommands.", "Arguments": "", "Since": "2.8.13", "Group": "server"},
	{"Command": "LATENCY HISTOGRAM", "Summary": "Return the cumulative distribution of latencies of a subset of commands or all.", "Arguments": "[command [command ...]]", "Since": "7.0.0", "Group": "server"},
	{"Command": "LATENCY HISTORY", "Summary": "Return timestamp-latency samples for the event.", "Arguments": "event", "Since": "2.8.13", "Group": "server"},
	{"Command": "LATENCY LATEST", "Summary": "Return the latest latency samples for all events.", "Arguments": "", "Since": "2.8.13", "Group": "server"},
	{"Command": "LATENCY RESET", "Summary": "Reset latency data for one or more events.", "Arguments": "[event [event ...]]", "Since": "2.8.13", "Group": "server"},
	{"Command": "LCS", "Summary": "Find longest common substring", "Arguments": "key1 key2 [LEN] [IDX] [MINMATCHLEN len] [WITHMATCHLEN]", "Since": "7.0.0", "Group": "string"},
	{"Command": "LINDEX", "Summary": "Get an element from a list by its index", "Arguments": "key index", "Since": "1.0.0", "Group": "list"},
	{"Command": "LINSERT", "Summary": "Insert an element before or after another element in a list", "Arguments": "key BEFORE|AFTER pivot element", "Since": "2.2.0", "Group": "list"},
	{"Command": "LLEN", "Summary": "Get the length of a list", "Arguments": "key", "Since": "1.0.0", "Group": "list"},
	{"Command": "LMOVE", "Summary": "Pop an element from a list, push it to another list and return it", "Arguments": "source destination LEFT|RIGHT LEFT|RIGHT", "Since": "6.2.0", "Group": "list"},
	{"Command": "LMPOP", "Summary": "Pop elements from a list", "Arguments": "numkeys key [key ...] LEFT|RIGHT [COUNT count]", "Since": "7.0.0", "Group": "list"},
	{"Command": "LOLWUT", "Summary": "Display some computer art and the Redis version", "Arguments": "[VERSION version]", "Since": "5.0.0", "Group": "server"},
	{"Command": "LPOP", "Summary": "Remove and get the first elements in a list", "Arguments": "key [count]", "Since": "1.0.0", "Group": "list"},
	{"Command": "LPOS", "Summary": "Return the index of matching elements on a list", "Arguments": "key element [RANK rank] [COUNT num-matches] [MAXLEN len]", "Since": "6.0.6", "Group": "list"},
	{"Command": "LPUSH", "Summary": "Prepend one or multiple elements to a list", "Arguments": "key element [element ...]", "Since": "1.0.0", "Group": "list"},
	{"Command": "LPUSHX", "Summary": "Prepend an element to a list, only if the list exists", "Arguments": "key element [element ...]", "Since": "2.2.0", "Group": "list"},
	{"Command": "LRANGE", "Summary": "Get a range of elements from a list", "Arguments": "key start stop", "Since": "1.0.0", "Group": "list"},
	{"Command": "LREM", "Summary": "Remove elements from a list", "Arguments": "key count element", "Since": "1.0.0", "Group": "list"},
	{"Command": "LSET", "Summary": "Set the value of an element in a list by its index", "Arguments": "key index element", "Since": "1.0.0", "Group": "list"},
	{"Command": "LTRIM", "Summary": "Trim a list to the specified range", "Arguments": "key start stop", "Since": "1.0.0", "Group": "list"},
	{"Command": "MEMORY", "Summary": "A container for memory diagnostics commands", "Arguments": "", "Since": "4.0.0", "Group": "server"},
	{"Command": "MEMORY DOCTOR", "Summary": "Outputs memory problems report", "Arguments": "", "Since": "4.0.0", "Group": "server"},
	{"Command": "MEMORY HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "4.0.0", "Group": "server"},
	{"Command": "MEMORY MALLOC-STATS", "Summary": "Show allocator internal stats", "Arguments": "", "Since": "4.0.0", "Group": "server"},
	{"Command": "MEMORY PURGE", "Summary": "Ask the allocator to release memory", "Arguments": "", "Since": "4.0.0", "Group": "server"},
	{"Command": "MEMORY STATS", "Summary": "Show memory usage details", "Arguments": "", "Since": "4.0.0", "Group": "server"},
	{"Command": "MEMORY USAGE", "Summary": "Estimate the memory usage of a key", "Arguments": "key [SAMPLES count]", "Since": "4.0.0", "Group": "server"},
	{"Command": "MGET", "Summary": "Get the values of all the given keys", "Arguments": "key [key ...]", "Since": "1.0.0", "Group": "string"},
	{"Command": "MIGRATE", "Summary": "Atomically transfer a key from a Redis instance to another one.", "Arguments": "host port key| destination-db timeout [COPY] [REPLACE] [[AUTH password]|[AUTH2 username password]] [KEYS key [key ...]]", "Since": "2.6.0", "Group": "generic"},
	{"Command": "MODULE", "Summary": "A container for module commands", "Arguments": "", "Since": "4.0.0", "Group": "server"},
	{"Command": "MODULE HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "5.0.0", "Group": "server"},
	{"Command": "MODULE LIST", "Summary": "List all modules loaded by the server", "Arguments": "", "Since": "4.0.0", "Group": "server"},
	{"Command": "MODULE LOAD", "Summary": "Load a module", "Arguments": "path [arg [arg ...]]", "Since": "4.0.0", "Group": "server"},
	{"Command": "MODULE LOADEX", "Summary": "Load a module with extended parameters", "Arguments": "path [CONFIG name value [CONFIG name value ...]] [ARGS arg [arg ...]]", "Since": "7.0.0", "Group": "server"},
	{"Command": "MODULE UNLOAD", "Summary": "Unload a module", "Arguments": "name", "Since": "4.0.0", "Group": "server"},
	{"Command": "MONITOR", "Summary": "Listen for all requests received by the server in real time", "Arguments": "", "Since": "1.0.0", "Group": "server"},
	{"Command": "MOVE", "Summary": "Move a key to another database", "Arguments": "key db", "Since": "1.0.0", "Group": "generic"},
	{"Command": "MSET", "Summary": "Set multiple keys to multiple values", "Arguments": "key value [key value ...]", "Since": "1.0.1", "Group": "string"},
	{"Command": "MSETNX", "Summary": "Set multiple keys to multiple values, only if none of the keys exist", "Arguments": "key value [key value ...]", "Since": "1.0.1", "Group": "string"},
	{"Command": "MULTI", "Summary": "Mark the start of a transaction block", "Arguments": "", "Since": "1.2.0", "Group": "transactions"},
	{"Command": "OBJECT", "Summary": "A container for object introspection commands", "Arguments": "", "Since": "2.2.3", "Group": "generic"},
	{"Command": "OBJECT ENCODING", "Summary": "Inspect the internal encoding of a Redis object", "Arguments": "key", "Since": "2.2.3", "Group": "generic"},
	{"Command": "OBJECT FREQ", "Summary": "Get the logarithmic access frequency counter of a Redis object", "Arguments": "key", "Since": "4.0.0", "Group": "generic"},
	{"Command": "OBJECT HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "6.2.0", "Group": "generic"},
	{"Command": "OBJECT IDLETIME", "Summary": "Get the time since a Redis object was last accessed", "Arguments": "key", "Since": "2.2.3", "Group": "generic"},
	{"Command": "OBJECT REFCOUNT", "Summary": "Get the number of references to the value of the key", "Arguments": "key", "Since": "2.2.3", "Group": "generic"},
	{"Command": "PERSIST", "Summary": "Remove the expiration from a key", "Arguments": "key", "Since": "2.2.0", "Group": "generic"},
	{"Command": "PEXPIRE", "Summary": "Set a key's time to live in milliseconds", "Arguments": "key milliseconds [NX|XX|GT|LT]", "Since": "2.6.0", "Group": "generic"},
	{"Command": "PEXPIREAT", "Summary": "Set the expiration for a key as a UNIX timestamp specified in milliseconds", "Arguments": "key unix-time-milliseconds [NX|XX|GT|LT]", "Since": "2.6.0", "Group": "generic"},
	{"Command": "PEXPIRETIME", "Summary": "Get the expiration Unix timestamp for a key in milliseconds", "Arguments": "key", "Since": "7.0.0", "Group": "generic"},
	{"Command": "PFADD", "Summary": "Adds the specified elements to the specified HyperLogLog.", "Arguments": "key [element [element ...]]", "Since": "2.8.9", "Group": "hyperloglog"},
	{"Command": "PFCOUNT", "Summary": "Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).", "Arguments": "key [key ...]", "Since": "2.8.9", "Group": "hyperloglog"},
	{"Command": "PFDEBUG", "Summary": "Internal commands for debugging HyperLogLog values", "Arguments": "subcommand key", "Since": "2.8.9", "Group": "hyperloglog"},
	{"Command": "PFMERGE", "Summary": "Merge N different HyperLogLogs into a single one.", "Arguments": "destkey sourcekey [sourcekey ...]", "Since": "2.8.9", "Group": "hyperloglog"},
	{"Command": "PFSELFTEST", "Summary": "An internal command for testing HyperLogLog values", "Arguments": "", "Since": "2.8.9", "Group": "hyperloglog"},
	{"Command": "PING", "Summary": "Ping the server", "Arguments": "[message]", "Since": "1.0.0", "Group": "connection"},
	{"Command": "PSETEX", "Summary": "Set the value and expiration in milliseconds of a key", "Arguments": "key milliseconds value", "Since": "2.6.0", "Group": "string"},
	{"Command": "PSUBSCRIBE", "Summary": "Listen for messages published to channels matching the given patterns", "Arguments": "pattern [pattern ...]", "Since": "2.0.0", "Group": "pubsub"},
	{"Command": "PSYNC", "Summary": "Internal command used for replication", "Arguments": "replicationid offset", "Since": "2.8.0", "Group": "server"},
	{"Command": "PTTL", "Summary": "Get the time to live for a key in milliseconds", "Arguments": "key", "Since": "2.6.0", "Group": "generic"},
	{"Command": "PUBLISH", "Summary": "Post a message to a channel", "Arguments": "channel message", "Since": "2.0.0", "Group": "pubsub"},
	{"Command": "PUBSUB", "Summary": "A container for Pub/Sub commands", "Arguments": "", "Since": "2.8.0", "Group": "pubsub"},
	{"Command": "PUBSUB CHANNELS", "Summary": "List active channels", "Arguments": "[pattern]", "Since": "2.8.0", "Group": "pubsub"},
	{"Command": "PUBSUB HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "6.2.0", "Group": "pubsub"},
	{"Command": "PUBSUB NUMPAT", "Summary": "Get the count of unique patterns pattern subscriptions", "Arguments": "", "Since": "2.8.0", "Group": "pubsub"},
	{"Command": "PUBSUB NUMSUB", "Summary": "Get the count of subscribers for channels", "Arguments": "[channel [channel ...]]", "Since": "2.8.0", "Group": "pubsub"},
	{"Command": "PUBSUB SHARDCHANNELS", "Summary": "List active shard channels", "Arguments": "[pattern]", "Since": "7.0.0", "Group": "pubsub"},
	{"Command": "PUBSUB SHARDNUMSUB", "Summary": "Get the count of subscribers for shard channels", "Arguments": "[shardchannel [shardchannel ...]]", "Since": "7.0.0", "Group": "pubsub"},
	{"Command": "PUNSUBSCRIBE", "Summary": "Stop listening for messages posted to channels matching the given patterns", "Arguments": "[pattern [pattern ...]]", "Since": "2.0.0", "Group": "pubsub"},
	{"Command": "QUIT", "Summary": "Close the connection", "Arguments": "", "Since": "1.0.0", "Group": "connection"},
	{"Command": "RANDOMKEY", "Summary": "Return a random key from the keyspace", "Arguments": "", "Since": "1.0.0", "Group": "generic"},
	{"Command": "READONLY", "Summary": "Enables read queries for a connection to a cluster replica node", "Arguments": "", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "READWRITE", "Summary": "Disables read queries for a connection to a cluster replica node", "Arguments": "", "Since": "3.0.0", "Group": "cluster"},
	{"Command": "RENAME", "Summary": "Rename a key", "Arguments": "key newkey", "Since": "1.0.0", "Group": "generic"},
	{"Command": "RENAMENX", "Summary": "Rename a key, only if the new key does not exist", "Arguments": "key newkey", "Since": "1.0.0", "Group": "generic"},
	{"Command": "REPLCONF", "Summary": "An internal command for configuring the replication stream", "Arguments": "", "Since": "3.0.0", "Group": "server"},
	{"Command": "REPLICAOF", "Summary": "Make the server a replica of another instance, or promote it as master.", "Arguments": "host port", "Since": "5.0.0", "Group": "server"},
	{"Command": "RESET", "Summary": "Reset the connection", "Arguments": "", "Since": "6.2.0", "Group": "connection"},
	{"Command": "RESTORE", "Summary": "Create a key using the provided serialized value, previously obtained using DUMP.", "Arguments": "key ttl serialized-value [REPLACE] [ABSTTL] [IDLETIME seconds] [FREQ frequency]", "Since": "2.6.0", "Group": "generic"},
	{"Command": "RESTORE-ASKING", "Summary": "An internal command for migrating keys in a cluster", "Arguments": "key ttl serialized-value [REPLACE] [ABSTTL] [IDLETIME seconds] [FREQ frequency]", "Since": "3.0.0", "Group": "server"},
	{"Command": "ROLE", "Summary": "Return the role of the instance in the context of replication", "Arguments": "", "Since": "2.8.12", "Group": "server"},
	{"Command": "RPOP", "Summary": "Remove and get the last elements in a list", "Arguments": "key [count]", "Since": "1.0.0", "Group": "list"},
	{"Command": "RPOPLPUSH", "Summary": "Remove the last element in a list, prepend it to another list and return it", "Arguments": "source destination", "Since": "1.2.0", "Group": "list"},
	{"Command": "RPUSH", "Summary": "Append one or multiple elements to a list", "Arguments": "key element [element ...]", "Since": "1.0.0", "Group": "list"},
	{"Command": "RPUSHX", "Summary": "Append an element to a list, only if the list exists", "Arguments": "key element [element ...]", "Since": "2.2.0", "Group": "list"},
	{"Command": "SADD", "Summary": "Add one or more members to a set", "Arguments": "key member [member ...]", "Since": "1.0.0", "Group": "set"},
	{"Command": "SAVE", "Summary": "Synchronously save the dataset to disk", "Arguments": "", "Since": "1.0.0", "Group": "server"},
	{"Command": "SCAN", "Summary": "Incrementally iterate the keys space", "Arguments": "cursor [MATCH pattern] [COUNT count] [TYPE type]", "Since": "2.8.0", "Group": "generic"},
	{"Command": "SCARD", "Summary": "Get the number of members in a set", "Arguments": "key", "Since": "1.0.0", "Group": "set"},
	{"Command": "SCRIPT", "Summary": "A container for Lua scripts management commands", "Arguments": "", "Since": "2.6.0", "Group": "scripting"},
	{"Command": "SCRIPT DEBUG", "Summary": "Set the debug mode for executed scripts.", "Arguments": "YES|SYNC|NO", "Since": "3.2.0", "Group": "scripting"},
	{"Command": "SCRIPT EXISTS", "Summary": "Check existence of scripts in the script cache.", "Arguments": "sha1 [sha1 ...]", "Since": "2.6.0", "Group": "scripting"},
	{"Command": "SCRIPT FLUSH", "Summary": "Remove all the scripts from the script cache.", "Arguments": "[ASYNC|SYNC]", "Since": "2.6.0", "Group": "scripting"},
	{"Command": "SCRIPT HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "5.0.0", "Group": "scripting"},
	{"Command": "SCRIPT KILL", "Summary": "Kill the script currently in execution.", "Arguments": "", "Since": "2.6.0", "Group": "scripting"},
	{"Command": "SCRIPT LOAD", "Summary": "Load the specified Lua script into the script cache.", "Arguments": "script", "Since": "2.6.0", "Group": "scripting"},
	{"Command": "SDIFF", "Summary": "Subtract multiple sets", "Arguments": "key [key ...]", "Since": "1.0.0", "Group": "set"},
	{"Command": "SDIFFSTORE", "Summary": "Subtract multiple sets and store the resulting set in a key", "Arguments": "destination key [key ...]", "Since": "1.0.0", "Group": "set"},
	{"Command": "SELECT", "Summary": "Change the selected database for the current connection", "Arguments": "index", "Since": "1.0.0", "Group": "connection"},
	{"Command": "SET", "Summary": "Set the string value of a key", "Arguments": "key value [NX|XX] [GET] [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|KEEPTTL]", "Since": "1.0.0", "Group": "string"},
	{"Command": "SETBIT", "Summary": "Sets or clears the bit at offset in the string value stored at key", "Arguments": "key offset value", "Since": "2.2.0", "Group": "bitmap"},
	{"Command": "SETEX", "Summary": "Set the value and expiration of a key", "Arguments": "key seconds value", "Since": "2.0.0", "Group": "string"},
	{"Command": "SETNX", "Summary": "Set the value of a key, only if the key does not exist", "Arguments": "key value", "Since": "1.0.0", "Group": "string"},
	{"Command": "SETRANGE", "Summary": "Overwrite part of a string at key starting at the specified offset", "Arguments": "key offset value", "Since": "2.2.0", "Group": "string"},
	{"Command": "SHUTDOWN", "Summary": "Synchronously save the dataset to disk and then shut down the server", "Arguments": "[NOSAVE|SAVE] [NOW] [FORCE] [ABORT]", "Since": "1.0.0", "Group": "server"},
	{"Command": "SINTER", "Summary": "Intersect multiple sets", "Arguments": "key [key ...]", "Since": "1.0.0", "Group": "set"},
	{"Command": "SINTERCARD", "Summary": "Intersect multiple sets and return the cardinality of the result", "Arguments": "numkeys key [key ...] [LIMIT limit]", "Since": "7.0.0", "Group": "set"},
	{"Command": "SINTERSTORE", "Summary": "Intersect multiple sets and store the resulting set in a key", "Arguments": "destination key [key ...]", "Since": "1.0.0", "Group": "set"},
	{"Command": "SISMEMBER", "Summary": "Determine if a given value is a member of a set", "Arguments": "key member", "Since": "1.0.0", "Group": "set"},
	{"Command": "SLAVEOF", "Summary": "Make the server a replica of another instance, or promote it as master.", "Arguments": "host port", "Since": "1.0.0", "Group": "server"},
	{"Command": "SLOWLOG", "Summary": "A container for slow log commands", "Arguments": "", "Since": "2.2.12", "Group": "server"},
	{"Command": "SLOWLOG GET", "Summary": "Get the slow log's entries", "Arguments": "[count]", "Since": "2.2.12", "Group": "server"},
	{"Command": "SLOWLOG HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "6.2.0", "Group": "server"},
	{"Command": "SLOWLOG LEN", "Summary": "Get the slow log's length", "Arguments": "", "Since": "2.2.12", "Group": "server"},
	{"Command": "SLOWLOG RESET", "Summary": "Clear all entries from the slow log", "Arguments": "", "Since": "2.2.12", "Group": "server"},
	{"Command": "SMEMBERS", "Summary": "Get all the members in a set", "Arguments": "key", "Since": "1.0.0", "Group": "set"},
	{"Command": "SMISMEMBER", "Summary": "Returns the membership associated with the given elements for a set", "Arguments": "key member [member ...]", "Since": "6.2.0", "Group": "set"},
	{"Command": "SMOVE", "Summary": "Move a member from one set to another", "Arguments": "source destination member", "Since": "1.0.0", "Group": "set"},
	{"Command": "SORT", "Summary": "Sort the elements in a list, set or sorted set", "Arguments": "key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]", "Since": "1.0.0", "Group": "generic"},
	{"Command": "SORT_RO", "Summary": "Sort the elements in a list, set or sorted set. Read-only variant of SORT.", "Arguments": "key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA]", "Since": "7.0.0", "Group": "generic"},
	{"Command": "SPOP", "Summary": "Remove and return one or multiple random members from a set", "Arguments": "key [count]", "Since": "1.0.0", "Group": "set"},
	{"Command": "SPUBLISH", "Summary": "Post a message to a shard channel", "Arguments": "shardchannel message", "Since": "7.0.0", "Group": "pubsub"},
	{"Command": "SRANDMEMBER", "Summary": "Get one or multiple random members from a set", "Arguments": "key [count]", "Since": "1.0.0", "Group": "set"},
	{"Command": "SREM", "Summary": "Remove one or more members from a set", "Arguments": "key member [member ...]", "Since": "1.0.0", "Group": "set"},
	{"Command": "SSCAN", "Summary": "Incrementally iterate Set elements", "Arguments": "key cursor [MATCH pattern] [COUNT count]", "Since": "2.8.0", "Group": "set"},
	{"Command": "SSUBSCRIBE", "Summary": "Listen for messages published to the given shard channels", "Arguments": "shardchannel [shardchannel ...]", "Since": "7.0.0", "Group": "pubsub"},
	{"Command": "STRLEN", "Summary": "Get the length of the value stored in a key", "Arguments": "key", "Since": "2.2.0", "Group": "string"},
	{"Command": "SUBSCRIBE", "Summary": "Listen for messages published to the given channels", "Arguments": "channel [channel ...]", "Since": "2.0.0", "Group": "pubsub"},
	{"Command": "SUBSTR", "Summary": "Get a substring of the string stored at a key", "Arguments": "key start end", "Since": "1.0.0", "Group": "string"},
	{"Command": "SUNION", "Summary": "Add multiple sets", "Arguments": "key [key ...]", "Since": "1.0.0", "Group": "set"},
	{"Command": "SUNIONSTORE", "Summary": "Add multiple sets and store the resulting set in a key", "Arguments": "destination key [key ...]", "Since": "1.0.0", "Group": "set"},
	{"Command": "SUNSUBSCRIBE", "Summary": "Stop listening for messages posted to the given shard channels", "Arguments": "[shardchannel [shardchannel ...]]", "Since": "7.0.0", "Group": "pubsub"},
	{"Command": "SWAPDB", "Summary": "Swaps two Redis databases", "Arguments": "index1 index2", "Since": "4.0.0", "Group": "server"},
	{"Command": "SYNC", "Summary": "Internal command used for replication", "Arguments": "", "Since": "1.0.0", "Group": "server"},
	{"Command": "TIME", "Summary": "Return the current server time", "Arguments": "", "Since": "2.6.0", "Group": "server"},
	{"Command": "TOUCH", "Summary": "Alters the last access time of a key(s). Returns the number of existing keys specified.", "Arguments": "key [key ...]", "Since": "3.2.1", "Group": "generic"},
	{"Command": "TTL", "Summary": "Get the time to live for a key in seconds", "Arguments": "key", "Since": "1.0.0", "Group": "generic"},
	{"Command": "TYPE", "Summary": "Determine the type stored at key", "Arguments": "key", "Since": "1.0.0", "Group": "generic"},
	{"Command": "UNLINK", "Summary": "Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.", "Arguments": "key [key ...]", "Since": "4.0.0", "Group": "generic"},
	{"Command": "UNSUBSCRIBE", "Summary": "Stop listening for messages posted to the given channels", "Arguments": "[channel [channel ...]]", "Since": "2.0.0", "Group": "pubsub"},
	{"Command": "UNWATCH", "Summary": "Forget about all watched keys", "Arguments": "", "Since": "2.2.0", "Group": "transactions"},
	{"Command": "WAIT", "Summary": "Wait for the synchronous replication of all the write commands sent in the context of the current connection", "Arguments": "numreplicas timeout", "Since": "3.0.0", "Group": "generic"},
	{"Command": "WATCH", "Summary": "Watch the given keys to determine execution of the MULTI/EXEC block", "Arguments": "key [key ...]", "Since": "2.2.0", "Group": "transactions"},
	{"Command": "XACK", "Summary": "Marks a pending message as correctly processed, effectively removing it from the pending entries list of the consumer group. Return value of the command is the number of messages successfully acknowledged, that is, the IDs we were actually able to resolve in the PEL.", "Arguments": "key group id [id ...]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XADD", "Summary": "Appends a new entry to a stream", "Arguments": "key [NOMKSTREAM] [MAXLEN|MINID [=|~] threshold [LIMIT count]] *|id field value [field value ...]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XAUTOCLAIM", "Summary": "Changes (or acquires) ownership of messages in a consumer group, as if the messages were delivered to the specified consumer.", "Arguments": "key group consumer min-idle-time start [COUNT count] [JUSTID]", "Since": "6.2.0", "Group": "stream"},
	{"Command": "XCLAIM", "Summary": "Changes (or acquires) ownership of a message in a consumer group, as if the message was delivered to the specified consumer.", "Arguments": "key group consumer min-idle-time id [id ...] [IDLE ms] [TIME unix-time-milliseconds] [RETRYCOUNT count] [FORCE] [JUSTID] [LASTID id]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XDEL", "Summary": "Removes the specified entries from the stream. Returns the number of items actually deleted, that may be different from the number of IDs passed in case certain IDs do not exist.", "Arguments": "key id [id ...]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XGROUP", "Summary": "A container for consumer groups commands", "Arguments": "", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XGROUP CREATE", "Summary": "Create a consumer group.", "Arguments": "key groupname id|$ [MKSTREAM] [ENTRIESREAD entries_read]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XGROUP CREATECONSUMER", "Summary": "Create a consumer in a consumer group.", "Arguments": "key groupname consumername", "Since": "6.2.0", "Group": "stream"},
	{"Command": "XGROUP DELCONSUMER", "Summary": "Delete a consumer from a consumer group.", "Arguments": "key groupname consumername", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XGROUP DESTROY", "Summary": "Destroy a consumer group.", "Arguments": "key groupname", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XGROUP HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XGROUP SETID", "Summary": "Set a consumer group to an arbitrary last delivered ID value.", "Arguments": "key groupname id|$ [ENTRIESREAD entries_read]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XINFO", "Summary": "A container for stream introspection commands", "Arguments": "", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XINFO CONSUMERS", "Summary": "List the consumers in a consumer group", "Arguments": "key groupname", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XINFO GROUPS", "Summary": "List the consumer groups of a stream", "Arguments": "key", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XINFO HELP", "Summary": "Show helpful text about the different subcommands", "Arguments": "", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XINFO STREAM", "Summary": "Get information about a stream", "Arguments": "key [FULL [COUNT count]]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XLEN", "Summary": "Return the number of entries in a stream", "Arguments": "key", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XPENDING", "Summary": "Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.", "Arguments": "key group [[IDLE min-idle-time] start end count [consumer]]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XRANGE", "Summary": "Return a range of elements in a stream, with IDs matching the specified IDs interval", "Arguments": "key start end [COUNT count]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XREAD", "Summary": "Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.", "Arguments": "[COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id [id ...]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XREADGROUP", "Summary": "Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.", "Arguments": "GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] id [id ...]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XREVRANGE", "Summary": "Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE", "Arguments": "key end start [COUNT count]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XSETID", "Summary": "An internal command for replicating stream values", "Arguments": "key last-id [ENTRIESADDED entries_added] [MAXDELETEDID max_deleted_entry_id]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "XTRIM", "Summary": "Trims the stream to (approximately if '~' is passed) a certain size", "Arguments": "key MAXLEN|MINID [=|~] threshold [LIMIT count]", "Since": "5.0.0", "Group": "stream"},
	{"Command": "ZADD", "Summary": "Add one or more members to a sorted set, or update its score if it already exists", "Arguments": "key [NX|XX] [GT|LT] [CH] [INCR] score member [score member ...]", "Since": "1.2.0", "Group": "sorted-set"},
	{"Command": "ZCARD", "Summary": "Get the number of members in a sorted set", "Arguments": "key", "Since": "1.2.0", "Group": "sorted-set"},
	{"Command": "ZCOUNT", "Summary": "Count the members in a sorted set with scores within the given values", "Arguments": "key min max", "Since": "2.0.0", "Group": "sorted-set"},
	{"Command": "ZDIFF", "Summary": "Subtract multiple sorted sets", "Arguments": "numkeys key [key ...] [WITHSCORES]", "Since": "6.2.0", "Group": "sorted-set"},
	{"Command": "ZDIFFSTORE", "Summary": "Subtract multiple sorted sets and store the resulting sorted set in a new key", "Arguments": "destination numkeys key [key ...]", "Since": "6.2.0", "Group": "sorted-set"},
	{"Command": "ZINCRBY", "Summary": "Increment the score of a member in a sorted set", "Arguments": "key increment member", "Since": "1.2.0", "Group": "sorted-set"},
	{"Command": "ZINTER", "Summary": "Intersect multiple sorted sets", "Arguments": "numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX] [WITHSCORES]", "Since": "6.2.0", "Group": "sorted-set"},
	{"Command": "ZINTERCARD", "Summary": "Intersect multiple sorted sets and return the cardinality of the result", "Arguments": "numkeys key [key ...] [LIMIT limit]", "Since": "7.0.0", "Group": "sorted-set"},
	{"Command": "ZINTERSTORE", "Summary": "Intersect multiple sorted sets and store the resulting sorted set in a new key", "Arguments": "destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]", "Since": "2.0.0", "Group": "sorted-set"},
	{"Command": "ZLEXCOUNT", "Summary": "Count the number of members in a sorted set between a given lexicographical range", "Arguments": "key min max", "Since": "2.8.9", "Group": "sorted-set"},
	{"Command": "ZMPOP", "Summary": "Remove and return members with scores in a sorted set", "Arguments": "numkeys key [key ...] MIN|MAX [COUNT count]", "Since": "7.0.0", "Group": "sorted-set"},
	{"Command": "ZMSCORE", "Summary": "Get the score associated with the given members in a sorted set", "Arguments": "key member [member ...]", "Since": "6.2.0", "Group": "sorted-set"},
	{"Command": "ZPOPMAX", "Summary": "Remove and return members with the highest scores in a sorted set", "Arguments": "key [count]", "Since": "5.0.0", "Group": "sorted-set"},
	{"Command": "ZPOPMIN", "Summary": "Remove and return members with the lowest scores in a sorted set", "Arguments": "key [count]", "Since": "5.0.0", "Group": "sorted-set"},
	{"Command": "ZRANDMEMBER", "Summary": "Get one or multiple random elements from a sorted set", "Arguments": "key [count [WITHSCORES]]", "Since": "6.2.0", "Group": "sorted-set"},
	{"Command": "ZRANGE", "Summary": "Return a range of members in a sorted set", "Arguments": "key start stop [BYSCORE|BYLEX] [REV] [LIMIT offset count] [WITHSCORES]", "Since": "1.2.0", "Group": "sorted-set"},
	{"Command": "ZRANGEBYLEX", "Summary": "Return a range of members in a sorted set, by lexicographical range", "Arguments": "key min max [LIMIT offset count]", "Since": "2.8.9", "Group": "sorted-set"},
	{"Command": "ZRANGEBYSCORE", "Summary": "Return a range of members in a sorted set, by score", "Arguments": "key min max [WITHSCORES] [LIMIT offset count]", "Since": "1.0.5", "Group": "sorted-set"},
	{"Command": "ZRANGESTORE", "Summary": "Store a range of members from sorted set into another key", "Arguments": "dst src min max [BYSCORE|BYLEX] [REV] [LIMIT offset count]", "Since": "6.2.0", "Group": "sorted-set"},
	{"Command": "ZRANK", "Summary": "Determine the index of a member in a sorted set", "Arguments": "key member", "Since": "2.0.0", "Group": "sorted-set"},
	{"Command": "ZREM", "Summary": "Remove one or more members from a sorted set", "Arguments": "key member [member ...]", "Since": "1.2.0", "Group": "sorted-set"},
	{"Command": "ZREMRANGEBYLEX", "Summary": "Remove all members in a sorted set between the given lexicographical range", "Arguments": "key min max", "Since": "2.8.9", "Group": "sorted-set"},
	{"Command": "ZREMRANGEBYRANK", "Summary": "Remove all members in a sorted set within the given indexes", "Arguments": "key start stop", "Since": "2.0.0", "Group": "sorted-set"},
	{"Command": "ZREMRANGEBYSCORE", "Summary": "Remove all members in a sorted set within the given scores", "Arguments": "key min max", "Since": "1.2.0", "Group": "sorted-set"},
	{"Command": "ZREVRANGE", "Summary": "Return a range of members in a sorted set, by index, with scores ordered from high to low", "Arguments": "key start stop [WITHSCORES]", "Since": "1.2.0", "Group": "sorted-set"},
	{"Command": "ZREVRANGEBYLEX", "Summary": "Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.", "Arguments": "key max min [LIMIT offset count]", "Since": "2.8.9", "Group": "sorted-set"},
	{"Command": "ZREVRANGEBYSCORE", "Summary": "Return a range of members in a sorted set, by score, with scores ordered from high to low", "Arguments": "key max min [WITHSCORES] [LIMIT offset count]", "Since": "2.2.0", "Group": "sorted-set"},
	{"Command": "ZREVRANK", "Summary": "Determine the index of a member in a sorted set, with scores ordered from high to low", "Arguments": "key member", "Since": "2.0.0", "Group": "sorted-set"},
	{"Command": "ZSCAN", "Summary": "Incrementally iterate sorted sets elements and associated scores", "Arguments": "key cursor [MATCH pattern] [COUNT count]", "Since": "2.8.0", "Group": "sorted-set"},
	{"Command": "ZSCORE", "Summary": "Get the score associated with the given member in a sorted set", "Arguments": "key member", "Since": "1.2.0", "Group": "sorted-set"},
	{"Command": "ZUNION", "Summary": "Add multiple sorted sets", "Arguments": "numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX] [WITHSCORES]", "Since": "6.2.0", "Group": "sorted-set"},
	{"Command": "ZUNIONSTORE", "Summary": "Add multiple sorted sets and store the resulting sorted set in a new key", "Arguments": "destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]", "Since": "2.0.0", "Group": "sorted-set"}
]